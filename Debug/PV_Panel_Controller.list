
PV_Panel_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000612c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080062fc  080062fc  000162fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006554  08006554  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08006554  08006554  00016554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800655c  0800655c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800655c  0800655c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006560  08006560  00016560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08006564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000009c  08006600  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08006600  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013817  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a2  00000000  00000000  000338e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00036088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  000371e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024392  00000000  00000000  00038278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ce0  00000000  00000000  0005c60a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e056d  00000000  00000000  000712ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151857  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e9c  00000000  00000000  001518ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080062e4 	.word	0x080062e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	080062e4 	.word	0x080062e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	011b      	lsls	r3, r3, #4
 80005c6:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	f023 030f 	bic.w	r3, r3, #15
 80005ce:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 80005d0:	7bbb      	ldrb	r3, [r7, #14]
 80005d2:	f043 030c 	orr.w	r3, r3, #12
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	723b      	strb	r3, [r7, #8]
 80005da:	7bbb      	ldrb	r3, [r7, #14]
 80005dc:	f043 0308 	orr.w	r3, r3, #8
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	727b      	strb	r3, [r7, #9]
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	f043 030c 	orr.w	r3, r3, #12
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	72bb      	strb	r3, [r7, #10]
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f043 0308 	orr.w	r3, r3, #8
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <lcd16x2_i2c_sendCommand+0x60>)
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <lcd16x2_i2c_sendCommand+0x64>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b299      	uxth	r1, r3
 8000602:	f107 0208 	add.w	r2, r7, #8
 8000606:	23c8      	movs	r3, #200	; 0xc8
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2304      	movs	r3, #4
 800060c:	f002 f9da 	bl	80029c4 <HAL_I2C_Master_Transmit>
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000b8 	.word	0x200000b8
 800061c:	200000bc 	.word	0x200000bc

08000620 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af02      	add	r7, sp, #8
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	011b      	lsls	r3, r3, #4
 800062e:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	f043 030d 	orr.w	r3, r3, #13
 800063e:	b2db      	uxtb	r3, r3
 8000640:	723b      	strb	r3, [r7, #8]
 8000642:	7bbb      	ldrb	r3, [r7, #14]
 8000644:	f043 0309 	orr.w	r3, r3, #9
 8000648:	b2db      	uxtb	r3, r3
 800064a:	727b      	strb	r3, [r7, #9]
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	f043 030d 	orr.w	r3, r3, #13
 8000652:	b2db      	uxtb	r3, r3
 8000654:	72bb      	strb	r3, [r7, #10]
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	f043 0309 	orr.w	r3, r3, #9
 800065c:	b2db      	uxtb	r3, r3
 800065e:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <lcd16x2_i2c_sendData+0x60>)
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <lcd16x2_i2c_sendData+0x64>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b299      	uxth	r1, r3
 800066a:	f107 0208 	add.w	r2, r7, #8
 800066e:	23c8      	movs	r3, #200	; 0xc8
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2304      	movs	r3, #4
 8000674:	f002 f9a6 	bl	80029c4 <HAL_I2C_Master_Transmit>
}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000b8 	.word	0x200000b8
 8000684:	200000bc 	.word	0x200000bc

08000688 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000690:	2032      	movs	r0, #50	; 0x32
 8000692:	f001 f8e7 	bl	8001864 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000696:	4a30      	ldr	r2, [pc, #192]	; (8000758 <lcd16x2_i2c_init+0xd0>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 800069c:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <lcd16x2_i2c_init+0xd0>)
 800069e:	6818      	ldr	r0, [r3, #0]
 80006a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006a4:	2205      	movs	r2, #5
 80006a6:	214e      	movs	r1, #78	; 0x4e
 80006a8:	f002 fa8a 	bl	8002bc0 <HAL_I2C_IsDeviceReady>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d010      	beq.n	80006d4 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 80006b2:	4b29      	ldr	r3, [pc, #164]	; (8000758 <lcd16x2_i2c_init+0xd0>)
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006ba:	2205      	movs	r2, #5
 80006bc:	217e      	movs	r1, #126	; 0x7e
 80006be:	f002 fa7f 	bl	8002bc0 <HAL_I2C_IsDeviceReady>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <lcd16x2_i2c_init+0x44>
    {
      return false;
 80006c8:	2300      	movs	r3, #0
 80006ca:	e040      	b.n	800074e <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <lcd16x2_i2c_init+0xd4>)
 80006ce:	227e      	movs	r2, #126	; 0x7e
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	e002      	b.n	80006da <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <lcd16x2_i2c_init+0xd4>)
 80006d6:	224e      	movs	r2, #78	; 0x4e
 80006d8:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 80006da:	202d      	movs	r0, #45	; 0x2d
 80006dc:	f001 f8c2 	bl	8001864 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 80006e0:	2030      	movs	r0, #48	; 0x30
 80006e2:	f7ff ff69 	bl	80005b8 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 80006e6:	2005      	movs	r0, #5
 80006e8:	f001 f8bc 	bl	8001864 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006ec:	2030      	movs	r0, #48	; 0x30
 80006ee:	f7ff ff63 	bl	80005b8 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f001 f8b6 	bl	8001864 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006f8:	2030      	movs	r0, #48	; 0x30
 80006fa:	f7ff ff5d 	bl	80005b8 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006fe:	2008      	movs	r0, #8
 8000700:	f001 f8b0 	bl	8001864 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8000704:	2020      	movs	r0, #32
 8000706:	f7ff ff57 	bl	80005b8 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 800070a:	2008      	movs	r0, #8
 800070c:	f001 f8aa 	bl	8001864 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000710:	2028      	movs	r0, #40	; 0x28
 8000712:	f7ff ff51 	bl	80005b8 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000716:	2001      	movs	r0, #1
 8000718:	f001 f8a4 	bl	8001864 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 800071c:	2008      	movs	r0, #8
 800071e:	f7ff ff4b 	bl	80005b8 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000722:	2001      	movs	r0, #1
 8000724:	f001 f89e 	bl	8001864 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000728:	2001      	movs	r0, #1
 800072a:	f7ff ff45 	bl	80005b8 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800072e:	2003      	movs	r0, #3
 8000730:	f001 f898 	bl	8001864 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8000734:	2006      	movs	r0, #6
 8000736:	f7ff ff3f 	bl	80005b8 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800073a:	2001      	movs	r0, #1
 800073c:	f001 f892 	bl	8001864 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff ff39 	bl	80005b8 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000746:	2003      	movs	r0, #3
 8000748:	f001 f88c 	bl	8001864 <HAL_Delay>

  return true;
 800074c:	2301      	movs	r3, #1
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000b8 	.word	0x200000b8
 800075c:	200000bc 	.word	0x200000bc

08000760 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	4613      	mov	r3, r2
 800076e:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d108      	bne.n	8000790 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000784:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff15 	bl	80005b8 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 800078e:	e007      	b.n	80007a0 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000796:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff0c 	bl	80005b8 <lcd16x2_i2c_sendCommand>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff ff03 	bl	80005b8 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80007b2:	2003      	movs	r0, #3
 80007b4:	f001 f856 	bl	8001864 <HAL_Delay>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 80007bc:	b40f      	push	{r0, r1, r2, r3}
 80007be:	b590      	push	{r4, r7, lr}
 80007c0:	b089      	sub	sp, #36	; 0x24
 80007c2:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80007c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007c8:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80007d2:	4618      	mov	r0, r3
 80007d4:	f005 f96e 	bl	8005ab4 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80007d8:	2300      	movs	r3, #0
 80007da:	77fb      	strb	r3, [r7, #31]
 80007dc:	e00b      	b.n	80007f6 <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 80007de:	7ffb      	ldrb	r3, [r7, #31]
 80007e0:	f107 0220 	add.w	r2, r7, #32
 80007e4:	4413      	add	r3, r2
 80007e6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff18 	bl	8000620 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80007f0:	7ffb      	ldrb	r3, [r7, #31]
 80007f2:	3301      	adds	r3, #1
 80007f4:	77fb      	strb	r3, [r7, #31]
 80007f6:	7ffc      	ldrb	r4, [r7, #31]
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fd07 	bl	8000210 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	429c      	cmp	r4, r3
 8000806:	d202      	bcs.n	800080e <lcd16x2_i2c_printf+0x52>
 8000808:	7ffb      	ldrb	r3, [r7, #31]
 800080a:	2b0f      	cmp	r3, #15
 800080c:	d9e7      	bls.n	80007de <lcd16x2_i2c_printf+0x22>
  }
}
 800080e:	bf00      	nop
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f000 ffae 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f88a 	bl	800093c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_ADC1_Init();
 8000828:	f000 f8f4 	bl	8000a14 <MX_ADC1_Init>
  MX_I2C1_Init();
 800082c:	f000 f92c 	bl	8000a88 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000830:	f000 f958 	bl	8000ae4 <MX_TIM3_Init>
  USART1_UART_Init();
 8000834:	f000 fba2 	bl	8000f7c <USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  lcd16x2_i2c_init(&hi2c1);
 8000838:	4837      	ldr	r0, [pc, #220]	; (8000918 <main+0xfc>)
 800083a:	f7ff ff25 	bl	8000688 <lcd16x2_i2c_init>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800083e:	2100      	movs	r1, #0
 8000840:	4836      	ldr	r0, [pc, #216]	; (800091c <main+0x100>)
 8000842:	f003 fab1 	bl	8003da8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000846:	2108      	movs	r1, #8
 8000848:	4834      	ldr	r0, [pc, #208]	; (800091c <main+0x100>)
 800084a:	f003 faad 	bl	8003da8 <HAL_TIM_PWM_Start>

  SERVO_SET_NEUTRAL_POSITION(&servo_horizontal);
 800084e:	4834      	ldr	r0, [pc, #208]	; (8000920 <main+0x104>)
 8000850:	f000 fd14 	bl	800127c <SERVO_SET_NEUTRAL_POSITION>
  SERVO_SET_NEUTRAL_POSITION(&servo_vertical);
 8000854:	4833      	ldr	r0, [pc, #204]	; (8000924 <main+0x108>)
 8000856:	f000 fd11 	bl	800127c <SERVO_SET_NEUTRAL_POSITION>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  HAL_UART_Receive_IT(&huart1, &uart1_buffer, BUFFER_SIZE);
 800085a:	2201      	movs	r2, #1
 800085c:	4932      	ldr	r1, [pc, #200]	; (8000928 <main+0x10c>)
 800085e:	4833      	ldr	r0, [pc, #204]	; (800092c <main+0x110>)
 8000860:	f004 faa5 	bl	8004dae <HAL_UART_Receive_IT>

	  	  ADC_CONFIG_CH0();
 8000864:	f000 f9c0 	bl	8000be8 <ADC_CONFIG_CH0>
	  	  HAL_ADC_Start(&hadc1);
 8000868:	4831      	ldr	r0, [pc, #196]	; (8000930 <main+0x114>)
 800086a:	f001 f863 	bl	8001934 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800086e:	f04f 31ff 	mov.w	r1, #4294967295
 8000872:	482f      	ldr	r0, [pc, #188]	; (8000930 <main+0x114>)
 8000874:	f001 f963 	bl	8001b3e <HAL_ADC_PollForConversion>
	  	  adc_sensor_values[0] = HAL_ADC_GetValue(&hadc1);
 8000878:	482d      	ldr	r0, [pc, #180]	; (8000930 <main+0x114>)
 800087a:	f001 f9eb 	bl	8001c54 <HAL_ADC_GetValue>
 800087e:	4603      	mov	r3, r0
 8000880:	4a2c      	ldr	r2, [pc, #176]	; (8000934 <main+0x118>)
 8000882:	6013      	str	r3, [r2, #0]
	  	  HAL_ADC_Stop(&hadc1);
 8000884:	482a      	ldr	r0, [pc, #168]	; (8000930 <main+0x114>)
 8000886:	f001 f927 	bl	8001ad8 <HAL_ADC_Stop>

	  	  ADC_CONFIG_CH1();
 800088a:	f000 f9c5 	bl	8000c18 <ADC_CONFIG_CH1>
	  	  HAL_ADC_Start(&hadc1);
 800088e:	4828      	ldr	r0, [pc, #160]	; (8000930 <main+0x114>)
 8000890:	f001 f850 	bl	8001934 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000894:	f04f 31ff 	mov.w	r1, #4294967295
 8000898:	4825      	ldr	r0, [pc, #148]	; (8000930 <main+0x114>)
 800089a:	f001 f950 	bl	8001b3e <HAL_ADC_PollForConversion>
	  	  adc_sensor_values[1] = HAL_ADC_GetValue(&hadc1);
 800089e:	4824      	ldr	r0, [pc, #144]	; (8000930 <main+0x114>)
 80008a0:	f001 f9d8 	bl	8001c54 <HAL_ADC_GetValue>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4a23      	ldr	r2, [pc, #140]	; (8000934 <main+0x118>)
 80008a8:	6053      	str	r3, [r2, #4]
	  	  HAL_ADC_Stop(&hadc1);
 80008aa:	4821      	ldr	r0, [pc, #132]	; (8000930 <main+0x114>)
 80008ac:	f001 f914 	bl	8001ad8 <HAL_ADC_Stop>

	  	  ADC_CONFIG_CH4();
 80008b0:	f000 f9ca 	bl	8000c48 <ADC_CONFIG_CH4>
	  	  HAL_ADC_Start(&hadc1);
 80008b4:	481e      	ldr	r0, [pc, #120]	; (8000930 <main+0x114>)
 80008b6:	f001 f83d 	bl	8001934 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80008ba:	f04f 31ff 	mov.w	r1, #4294967295
 80008be:	481c      	ldr	r0, [pc, #112]	; (8000930 <main+0x114>)
 80008c0:	f001 f93d 	bl	8001b3e <HAL_ADC_PollForConversion>
	  	  adc_sensor_values[2] = HAL_ADC_GetValue(&hadc1);
 80008c4:	481a      	ldr	r0, [pc, #104]	; (8000930 <main+0x114>)
 80008c6:	f001 f9c5 	bl	8001c54 <HAL_ADC_GetValue>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a19      	ldr	r2, [pc, #100]	; (8000934 <main+0x118>)
 80008ce:	6093      	str	r3, [r2, #8]
	  	  HAL_ADC_Stop(&hadc1);
 80008d0:	4817      	ldr	r0, [pc, #92]	; (8000930 <main+0x114>)
 80008d2:	f001 f901 	bl	8001ad8 <HAL_ADC_Stop>

	  	  ADC_CONFIG_CH8();
 80008d6:	f000 f9cf 	bl	8000c78 <ADC_CONFIG_CH8>
	  	  HAL_ADC_Start(&hadc1);
 80008da:	4815      	ldr	r0, [pc, #84]	; (8000930 <main+0x114>)
 80008dc:	f001 f82a 	bl	8001934 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80008e0:	f04f 31ff 	mov.w	r1, #4294967295
 80008e4:	4812      	ldr	r0, [pc, #72]	; (8000930 <main+0x114>)
 80008e6:	f001 f92a 	bl	8001b3e <HAL_ADC_PollForConversion>
	  	  adc_sensor_values[3] = HAL_ADC_GetValue(&hadc1);
 80008ea:	4811      	ldr	r0, [pc, #68]	; (8000930 <main+0x114>)
 80008ec:	f001 f9b2 	bl	8001c54 <HAL_ADC_GetValue>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <main+0x118>)
 80008f4:	60d3      	str	r3, [r2, #12]
	  	  HAL_ADC_Stop(&hadc1);
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <main+0x114>)
 80008f8:	f001 f8ee 	bl	8001ad8 <HAL_ADC_Stop>

	  	  if(control_mode == REMOTE_CONNECTION_OFF){
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <main+0x11c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d101      	bne.n	800090a <main+0xee>
	  	  COMPARE_SENSOR_VALUES();
 8000906:	f000 f9cf 	bl	8000ca8 <COMPARE_SENSOR_VALUES>
	  	  }

	  	  REFRESH_INFO_ON_LCD();
 800090a:	f000 fbab 	bl	8001064 <REFRESH_INFO_ON_LCD>
		  delay(1000);
 800090e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000912:	f000 fbc9 	bl	80010a8 <delay>
	  	  HAL_UART_Receive_IT(&huart1, &uart1_buffer, BUFFER_SIZE);
 8000916:	e7a0      	b.n	800085a <main+0x3e>
 8000918:	2000010c 	.word	0x2000010c
 800091c:	20000188 	.word	0x20000188
 8000920:	20000000 	.word	0x20000000
 8000924:	2000000c 	.word	0x2000000c
 8000928:	2000025e 	.word	0x2000025e
 800092c:	20000218 	.word	0x20000218
 8000930:	200001d0 	.word	0x200001d0
 8000934:	20000260 	.word	0x20000260
 8000938:	200000f9 	.word	0x200000f9

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2234      	movs	r2, #52	; 0x34
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f004 ffe6 	bl	800591c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <SystemClock_Config+0xd0>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a28      	ldr	r2, [pc, #160]	; (8000a0c <SystemClock_Config+0xd0>)
 800096a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
 8000970:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <SystemClock_Config+0xd0>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800097c:	2300      	movs	r3, #0
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <SystemClock_Config+0xd4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000988:	4a21      	ldr	r2, [pc, #132]	; (8000a10 <SystemClock_Config+0xd4>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <SystemClock_Config+0xd4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800099c:	2302      	movs	r3, #2
 800099e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a0:	2301      	movs	r3, #1
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a4:	2310      	movs	r3, #16
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a8:	2302      	movs	r3, #2
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009b0:	2310      	movs	r3, #16
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009b4:	23a8      	movs	r3, #168	; 0xa8
 80009b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009bc:	2302      	movs	r3, #2
 80009be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 fea7 	bl	800371c <HAL_RCC_OscConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009d4:	f000 fb7e 	bl	80010d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d8:	230f      	movs	r3, #15
 80009da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009dc:	2302      	movs	r3, #2
 80009de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	2102      	movs	r1, #2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 fc1b 	bl	8003230 <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a00:	f000 fb68 	bl	80010d4 <Error_Handler>
  }
}
 8000a04:	bf00      	nop
 8000a06:	3750      	adds	r7, #80	; 0x50
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000

08000a14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_ADC1_Init+0x68>)
 8000a1a:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <MX_ADC1_Init+0x6c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_ADC1_Init+0x68>)
 8000a20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_ADC1_Init+0x68>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_ADC1_Init+0x68>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_ADC1_Init+0x68>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_ADC1_Init+0x68>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_ADC1_Init+0x68>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <MX_ADC1_Init+0x68>)
 8000a48:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <MX_ADC1_Init+0x70>)
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_ADC1_Init+0x68>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <MX_ADC1_Init+0x68>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_ADC1_Init+0x68>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_ADC1_Init+0x68>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_ADC1_Init+0x68>)
 8000a68:	f000 ff20 	bl	80018ac <HAL_ADC_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8000a72:	f000 fb2f 	bl	80010d4 <Error_Handler>
  }

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200001d0 	.word	0x200001d0
 8000a80:	40012000 	.word	0x40012000
 8000a84:	0f000001 	.word	0x0f000001

08000a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a8e:	4a13      	ldr	r2, [pc, #76]	; (8000adc <MX_I2C1_Init+0x54>)
 8000a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_I2C1_Init+0x58>)
 8000a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ac6:	f001 fe39 	bl	800273c <HAL_I2C_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ad0:	f000 fb00 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2000010c 	.word	0x2000010c
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	000186a0 	.word	0x000186a0

08000ae4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	; 0x38
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
 8000b10:	615a      	str	r2, [r3, #20]
 8000b12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b14:	4b32      	ldr	r3, [pc, #200]	; (8000be0 <MX_TIM3_Init+0xfc>)
 8000b16:	4a33      	ldr	r2, [pc, #204]	; (8000be4 <MX_TIM3_Init+0x100>)
 8000b18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000b1a:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <MX_TIM3_Init+0xfc>)
 8000b1c:	2263      	movs	r2, #99	; 0x63
 8000b1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b20:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <MX_TIM3_Init+0xfc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16800;
 8000b26:	4b2e      	ldr	r3, [pc, #184]	; (8000be0 <MX_TIM3_Init+0xfc>)
 8000b28:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8000b2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <MX_TIM3_Init+0xfc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b34:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_TIM3_Init+0xfc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b3a:	4829      	ldr	r0, [pc, #164]	; (8000be0 <MX_TIM3_Init+0xfc>)
 8000b3c:	f003 f88c 	bl	8003c58 <HAL_TIM_Base_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b46:	f000 fac5 	bl	80010d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4822      	ldr	r0, [pc, #136]	; (8000be0 <MX_TIM3_Init+0xfc>)
 8000b58:	f003 fbb4 	bl	80042c4 <HAL_TIM_ConfigClockSource>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b62:	f000 fab7 	bl	80010d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b66:	481e      	ldr	r0, [pc, #120]	; (8000be0 <MX_TIM3_Init+0xfc>)
 8000b68:	f003 f8c5 	bl	8003cf6 <HAL_TIM_PWM_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b72:	f000 faaf 	bl	80010d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b7e:	f107 0320 	add.w	r3, r7, #32
 8000b82:	4619      	mov	r1, r3
 8000b84:	4816      	ldr	r0, [pc, #88]	; (8000be0 <MX_TIM3_Init+0xfc>)
 8000b86:	f003 ffa3 	bl	8004ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b90:	f000 faa0 	bl	80010d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b94:	2360      	movs	r3, #96	; 0x60
 8000b96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1260;
 8000b98:	f240 43ec 	movw	r3, #1260	; 0x4ec
 8000b9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4619      	mov	r1, r3
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <MX_TIM3_Init+0xfc>)
 8000bae:	f003 facb 	bl	8004148 <HAL_TIM_PWM_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000bb8:	f000 fa8c 	bl	80010d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2208      	movs	r2, #8
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <MX_TIM3_Init+0xfc>)
 8000bc4:	f003 fac0 	bl	8004148 <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000bce:	f000 fa81 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bd2:	4803      	ldr	r0, [pc, #12]	; (8000be0 <MX_TIM3_Init+0xfc>)
 8000bd4:	f000 fc92 	bl	80014fc <HAL_TIM_MspPostInit>

}
 8000bd8:	bf00      	nop
 8000bda:	3738      	adds	r7, #56	; 0x38
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000188 	.word	0x20000188
 8000be4:	40000400 	.word	0x40000400

08000be8 <ADC_CONFIG_CH0>:
/**
  * @brief CONFIGURATION OF CHANNEL0 AS A CURRENT ADC CHANNEL
  * @param None
  * @retval None
  */
void ADC_CONFIG_CH0(void){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0

		  sConfig.Channel = ADC_CHANNEL_0;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <ADC_CONFIG_CH0+0x28>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <ADC_CONFIG_CH0+0x28>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	605a      	str	r2, [r3, #4]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf8:	4905      	ldr	r1, [pc, #20]	; (8000c10 <ADC_CONFIG_CH0+0x28>)
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <ADC_CONFIG_CH0+0x2c>)
 8000bfc:	f001 f838 	bl	8001c70 <HAL_ADC_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <ADC_CONFIG_CH0+0x22>
		  {
		    Error_Handler();
 8000c06:	f000 fa65 	bl	80010d4 <Error_Handler>
		  }
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000c0 	.word	0x200000c0
 8000c14:	200001d0 	.word	0x200001d0

08000c18 <ADC_CONFIG_CH1>:
/**
  * @brief CONFIGURATION OF CHANNEL1 AS A CURRENT ADC CHANNEL
  * @param None
  * @retval None
  */
void ADC_CONFIG_CH1(void){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

		  sConfig.Channel = ADC_CHANNEL_1;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <ADC_CONFIG_CH1+0x28>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <ADC_CONFIG_CH1+0x28>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	605a      	str	r2, [r3, #4]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c28:	4905      	ldr	r1, [pc, #20]	; (8000c40 <ADC_CONFIG_CH1+0x28>)
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <ADC_CONFIG_CH1+0x2c>)
 8000c2c:	f001 f820 	bl	8001c70 <HAL_ADC_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <ADC_CONFIG_CH1+0x22>
		  {
		    Error_Handler();
 8000c36:	f000 fa4d 	bl	80010d4 <Error_Handler>
		  }
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000c0 	.word	0x200000c0
 8000c44:	200001d0 	.word	0x200001d0

08000c48 <ADC_CONFIG_CH4>:
/**
  * @brief CONFIGURATION OF CHANNEL2 AS A CURRENT ADC CHANNEL
  * @param None
  * @retval None
  */
void ADC_CONFIG_CH4(void){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

		  sConfig.Channel = ADC_CHANNEL_4;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <ADC_CONFIG_CH4+0x28>)
 8000c4e:	2204      	movs	r2, #4
 8000c50:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <ADC_CONFIG_CH4+0x28>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	605a      	str	r2, [r3, #4]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c58:	4905      	ldr	r1, [pc, #20]	; (8000c70 <ADC_CONFIG_CH4+0x28>)
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <ADC_CONFIG_CH4+0x2c>)
 8000c5c:	f001 f808 	bl	8001c70 <HAL_ADC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <ADC_CONFIG_CH4+0x22>
		  {
		    Error_Handler();
 8000c66:	f000 fa35 	bl	80010d4 <Error_Handler>
		  }
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000c0 	.word	0x200000c0
 8000c74:	200001d0 	.word	0x200001d0

08000c78 <ADC_CONFIG_CH8>:
/**
  * @brief CONFIGURATION OF CHANNEL4 AS A CURRENT ADC CHANNEL
  * @param None
  * @retval None
  */
void ADC_CONFIG_CH8(void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

		  sConfig.Channel = ADC_CHANNEL_8;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <ADC_CONFIG_CH8+0x28>)
 8000c7e:	2208      	movs	r2, #8
 8000c80:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <ADC_CONFIG_CH8+0x28>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	605a      	str	r2, [r3, #4]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c88:	4905      	ldr	r1, [pc, #20]	; (8000ca0 <ADC_CONFIG_CH8+0x28>)
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <ADC_CONFIG_CH8+0x2c>)
 8000c8c:	f000 fff0 	bl	8001c70 <HAL_ADC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <ADC_CONFIG_CH8+0x22>
		  {
		    Error_Handler();
 8000c96:	f000 fa1d 	bl	80010d4 <Error_Handler>
		  }
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200000c0 	.word	0x200000c0
 8000ca4:	200001d0 	.word	0x200001d0

08000ca8 <COMPARE_SENSOR_VALUES>:
  * POSITION SHOULD BE CHANGED OR NOT, AND CALLS FUNCTIONS FROM SERVO LIBRARY IF
  * CHANGE OF POSITION IS NEEDED
  * @param None
  * @retval None
  */
void COMPARE_SENSOR_VALUES(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

	uint32_t temp;
	//1st AND 2nd SENSOR HORIZONTAL COMPARISION
	if(adc_sensor_values[0] >= adc_sensor_values[1]){
 8000cae:	4b50      	ldr	r3, [pc, #320]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b4f      	ldr	r3, [pc, #316]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d310      	bcc.n	8000cdc <COMPARE_SENSOR_VALUES+0x34>

		temp = adc_sensor_values[0] - adc_sensor_values[1];
 8000cba:	4b4d      	ldr	r3, [pc, #308]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b4c      	ldr	r3, [pc, #304]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	607b      	str	r3, [r7, #4]

		if(temp >= REGULATION_SENSITIVITY && servo_horizontal.position < 180){
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2bc7      	cmp	r3, #199	; 0xc7
 8000cca:	d917      	bls.n	8000cfc <COMPARE_SENSOR_VALUES+0x54>
 8000ccc:	4b49      	ldr	r3, [pc, #292]	; (8000df4 <COMPARE_SENSOR_VALUES+0x14c>)
 8000cce:	7a1b      	ldrb	r3, [r3, #8]
 8000cd0:	2bb3      	cmp	r3, #179	; 0xb3
 8000cd2:	d813      	bhi.n	8000cfc <COMPARE_SENSOR_VALUES+0x54>
			SERVO_SET_POSITION_UP(&servo_horizontal);
 8000cd4:	4847      	ldr	r0, [pc, #284]	; (8000df4 <COMPARE_SENSOR_VALUES+0x14c>)
 8000cd6:	f000 fa15 	bl	8001104 <SERVO_SET_POSITION_UP>
 8000cda:	e00f      	b.n	8000cfc <COMPARE_SENSOR_VALUES+0x54>
		}

	}else{

		temp = adc_sensor_values[1] - adc_sensor_values[0];
 8000cdc:	4b44      	ldr	r3, [pc, #272]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	607b      	str	r3, [r7, #4]

		if(temp >= REGULATION_SENSITIVITY && servo_horizontal.position > 0){
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2bc7      	cmp	r3, #199	; 0xc7
 8000cec:	d906      	bls.n	8000cfc <COMPARE_SENSOR_VALUES+0x54>
 8000cee:	4b41      	ldr	r3, [pc, #260]	; (8000df4 <COMPARE_SENSOR_VALUES+0x14c>)
 8000cf0:	7a1b      	ldrb	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <COMPARE_SENSOR_VALUES+0x54>
			SERVO_SET_POSITION_DOWN(&servo_horizontal);
 8000cf6:	483f      	ldr	r0, [pc, #252]	; (8000df4 <COMPARE_SENSOR_VALUES+0x14c>)
 8000cf8:	f000 fa64 	bl	80011c4 <SERVO_SET_POSITION_DOWN>
		}
	}

	//3rd AND 4th SENSOR HORIZONTAL COMPARISION
	if(adc_sensor_values[2] >= adc_sensor_values[3]){
 8000cfc:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	4b3b      	ldr	r3, [pc, #236]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d310      	bcc.n	8000d2a <COMPARE_SENSOR_VALUES+0x82>

		temp = adc_sensor_values[2] - adc_sensor_values[3];
 8000d08:	4b39      	ldr	r3, [pc, #228]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	607b      	str	r3, [r7, #4]

		if(temp >= REGULATION_SENSITIVITY && servo_horizontal.position < 180){
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2bc7      	cmp	r3, #199	; 0xc7
 8000d18:	d917      	bls.n	8000d4a <COMPARE_SENSOR_VALUES+0xa2>
 8000d1a:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <COMPARE_SENSOR_VALUES+0x14c>)
 8000d1c:	7a1b      	ldrb	r3, [r3, #8]
 8000d1e:	2bb3      	cmp	r3, #179	; 0xb3
 8000d20:	d813      	bhi.n	8000d4a <COMPARE_SENSOR_VALUES+0xa2>
			SERVO_SET_POSITION_UP(&servo_horizontal);
 8000d22:	4834      	ldr	r0, [pc, #208]	; (8000df4 <COMPARE_SENSOR_VALUES+0x14c>)
 8000d24:	f000 f9ee 	bl	8001104 <SERVO_SET_POSITION_UP>
 8000d28:	e00f      	b.n	8000d4a <COMPARE_SENSOR_VALUES+0xa2>
		}

	}else{

		temp = adc_sensor_values[3] - adc_sensor_values[2];
 8000d2a:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	607b      	str	r3, [r7, #4]

		if(temp >= REGULATION_SENSITIVITY && servo_horizontal.position > 0){
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2bc7      	cmp	r3, #199	; 0xc7
 8000d3a:	d906      	bls.n	8000d4a <COMPARE_SENSOR_VALUES+0xa2>
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <COMPARE_SENSOR_VALUES+0x14c>)
 8000d3e:	7a1b      	ldrb	r3, [r3, #8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <COMPARE_SENSOR_VALUES+0xa2>
			SERVO_SET_POSITION_DOWN(&servo_horizontal);
 8000d44:	482b      	ldr	r0, [pc, #172]	; (8000df4 <COMPARE_SENSOR_VALUES+0x14c>)
 8000d46:	f000 fa3d 	bl	80011c4 <SERVO_SET_POSITION_DOWN>
		}
	}

	//1st AND 3rd VERTICAL SENSOR COMPARISION
	if(adc_sensor_values[0] >= adc_sensor_values[2]){
 8000d4a:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d310      	bcc.n	8000d78 <COMPARE_SENSOR_VALUES+0xd0>

		temp = adc_sensor_values[0] - adc_sensor_values[2];
 8000d56:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	607b      	str	r3, [r7, #4]

		if(temp >= REGULATION_SENSITIVITY && servo_vertical.position < 180){
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2bc7      	cmp	r3, #199	; 0xc7
 8000d66:	d917      	bls.n	8000d98 <COMPARE_SENSOR_VALUES+0xf0>
 8000d68:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <COMPARE_SENSOR_VALUES+0x150>)
 8000d6a:	7a1b      	ldrb	r3, [r3, #8]
 8000d6c:	2bb3      	cmp	r3, #179	; 0xb3
 8000d6e:	d813      	bhi.n	8000d98 <COMPARE_SENSOR_VALUES+0xf0>
			SERVO_SET_POSITION_UP(&servo_vertical);
 8000d70:	4821      	ldr	r0, [pc, #132]	; (8000df8 <COMPARE_SENSOR_VALUES+0x150>)
 8000d72:	f000 f9c7 	bl	8001104 <SERVO_SET_POSITION_UP>
 8000d76:	e00f      	b.n	8000d98 <COMPARE_SENSOR_VALUES+0xf0>
		}

	}else{

		temp = adc_sensor_values[2] - adc_sensor_values[0];
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	607b      	str	r3, [r7, #4]

		if(temp >= REGULATION_SENSITIVITY && servo_vertical.position > 0){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2bc7      	cmp	r3, #199	; 0xc7
 8000d88:	d906      	bls.n	8000d98 <COMPARE_SENSOR_VALUES+0xf0>
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <COMPARE_SENSOR_VALUES+0x150>)
 8000d8c:	7a1b      	ldrb	r3, [r3, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <COMPARE_SENSOR_VALUES+0xf0>
			SERVO_SET_POSITION_DOWN(&servo_vertical);
 8000d92:	4819      	ldr	r0, [pc, #100]	; (8000df8 <COMPARE_SENSOR_VALUES+0x150>)
 8000d94:	f000 fa16 	bl	80011c4 <SERVO_SET_POSITION_DOWN>
		}
	}

	//2nd AND 4th VERTICAL SENSOR COMPARISION
	if(adc_sensor_values[1] >= adc_sensor_values[3]){
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d310      	bcc.n	8000dc6 <COMPARE_SENSOR_VALUES+0x11e>

		temp = adc_sensor_values[1] - adc_sensor_values[3];
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	607b      	str	r3, [r7, #4]

		if(temp >= REGULATION_SENSITIVITY && servo_vertical.position < 180){
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2bc7      	cmp	r3, #199	; 0xc7
 8000db4:	d917      	bls.n	8000de6 <COMPARE_SENSOR_VALUES+0x13e>
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <COMPARE_SENSOR_VALUES+0x150>)
 8000db8:	7a1b      	ldrb	r3, [r3, #8]
 8000dba:	2bb3      	cmp	r3, #179	; 0xb3
 8000dbc:	d813      	bhi.n	8000de6 <COMPARE_SENSOR_VALUES+0x13e>
			SERVO_SET_POSITION_UP(&servo_vertical);
 8000dbe:	480e      	ldr	r0, [pc, #56]	; (8000df8 <COMPARE_SENSOR_VALUES+0x150>)
 8000dc0:	f000 f9a0 	bl	8001104 <SERVO_SET_POSITION_UP>
		if(temp >= REGULATION_SENSITIVITY  && servo_vertical.position > 0){
			SERVO_SET_POSITION_DOWN(&servo_vertical);
		}
	}

}
 8000dc4:	e00f      	b.n	8000de6 <COMPARE_SENSOR_VALUES+0x13e>
		temp = adc_sensor_values[3] - adc_sensor_values[1];
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <COMPARE_SENSOR_VALUES+0x148>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	607b      	str	r3, [r7, #4]
		if(temp >= REGULATION_SENSITIVITY  && servo_vertical.position > 0){
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2bc7      	cmp	r3, #199	; 0xc7
 8000dd6:	d906      	bls.n	8000de6 <COMPARE_SENSOR_VALUES+0x13e>
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <COMPARE_SENSOR_VALUES+0x150>)
 8000dda:	7a1b      	ldrb	r3, [r3, #8]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <COMPARE_SENSOR_VALUES+0x13e>
			SERVO_SET_POSITION_DOWN(&servo_vertical);
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <COMPARE_SENSOR_VALUES+0x150>)
 8000de2:	f000 f9ef 	bl	80011c4 <SERVO_SET_POSITION_DOWN>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000260 	.word	0x20000260
 8000df4:	20000000 	.word	0x20000000
 8000df8:	2000000c 	.word	0x2000000c

08000dfc <DECODE_MESSAGE>:
  * @brief DECODING MESSAGE(COMMAND) SENT FROM PHONE VIA HC-05 MODULE, AND
  * CALLING FUNCTION LINKED WITH PROCESSED COMMAND CODE
  * @param COMMAND CODE SENT FROM PHONE
  * @retval None
  */
void DECODE_MESSAGE(uint8_t command_code){
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]

	switch(command_code){
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b0b      	cmp	r3, #11
 8000e0a:	d002      	beq.n	8000e12 <DECODE_MESSAGE+0x16>
 8000e0c:	2b0c      	cmp	r3, #12
 8000e0e:	d013      	beq.n	8000e38 <DECODE_MESSAGE+0x3c>
 8000e10:	e025      	b.n	8000e5e <DECODE_MESSAGE+0x62>

		case ENABLE_REMOTE_CONTROL_COMMAND:
			control_mode = REMOTE_CONNECTION_ON;
 8000e12:	4b50      	ldr	r3, [pc, #320]	; (8000f54 <DECODE_MESSAGE+0x158>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)remote_ctrl_on_message, strlen(remote_ctrl_on_message), HAL_MAX_DELAY);
 8000e18:	4b4f      	ldr	r3, [pc, #316]	; (8000f58 <DECODE_MESSAGE+0x15c>)
 8000e1a:	681c      	ldr	r4, [r3, #0]
 8000e1c:	4b4e      	ldr	r3, [pc, #312]	; (8000f58 <DECODE_MESSAGE+0x15c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff f9f5 	bl	8000210 <strlen>
 8000e26:	4603      	mov	r3, r0
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	4621      	mov	r1, r4
 8000e30:	484a      	ldr	r0, [pc, #296]	; (8000f5c <DECODE_MESSAGE+0x160>)
 8000e32:	f003 ff2a 	bl	8004c8a <HAL_UART_Transmit>
			break;
 8000e36:	e027      	b.n	8000e88 <DECODE_MESSAGE+0x8c>

		case DISABLE_REMOTE_CONTROL_COMMAND:
			control_mode = REMOTE_CONNECTION_OFF;
 8000e38:	4b46      	ldr	r3, [pc, #280]	; (8000f54 <DECODE_MESSAGE+0x158>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)remote_ctrl_off_message, strlen(remote_ctrl_off_message), HAL_MAX_DELAY);
 8000e3e:	4b48      	ldr	r3, [pc, #288]	; (8000f60 <DECODE_MESSAGE+0x164>)
 8000e40:	681c      	ldr	r4, [r3, #0]
 8000e42:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <DECODE_MESSAGE+0x164>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff f9e2 	bl	8000210 <strlen>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	4621      	mov	r1, r4
 8000e56:	4841      	ldr	r0, [pc, #260]	; (8000f5c <DECODE_MESSAGE+0x160>)
 8000e58:	f003 ff17 	bl	8004c8a <HAL_UART_Transmit>
			break;
 8000e5c:	e014      	b.n	8000e88 <DECODE_MESSAGE+0x8c>

		default:
			if(control_mode == REMOTE_CONNECTION_OFF){
 8000e5e:	4b3d      	ldr	r3, [pc, #244]	; (8000f54 <DECODE_MESSAGE+0x158>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10e      	bne.n	8000e86 <DECODE_MESSAGE+0x8a>
			HAL_UART_Transmit(&huart1, (uint8_t*)not_connected_message, strlen(not_connected_message), HAL_MAX_DELAY);
 8000e68:	4b3e      	ldr	r3, [pc, #248]	; (8000f64 <DECODE_MESSAGE+0x168>)
 8000e6a:	681c      	ldr	r4, [r3, #0]
 8000e6c:	4b3d      	ldr	r3, [pc, #244]	; (8000f64 <DECODE_MESSAGE+0x168>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff f9cd 	bl	8000210 <strlen>
 8000e76:	4603      	mov	r3, r0
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	4621      	mov	r1, r4
 8000e80:	4836      	ldr	r0, [pc, #216]	; (8000f5c <DECODE_MESSAGE+0x160>)
 8000e82:	f003 ff02 	bl	8004c8a <HAL_UART_Transmit>
			}
			break;
 8000e86:	bf00      	nop
	}


	if(control_mode == REMOTE_CONNECTION_ON){
 8000e88:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <DECODE_MESSAGE+0x158>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d158      	bne.n	8000f44 <DECODE_MESSAGE+0x148>

		switch(command_code){
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	2b0c      	cmp	r3, #12
 8000e98:	d841      	bhi.n	8000f1e <DECODE_MESSAGE+0x122>
 8000e9a:	a201      	add	r2, pc, #4	; (adr r2, 8000ea0 <DECODE_MESSAGE+0xa4>)
 8000e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea0:	08000ee5 	.word	0x08000ee5
 8000ea4:	08000eed 	.word	0x08000eed
 8000ea8:	08000ed5 	.word	0x08000ed5
 8000eac:	08000edd 	.word	0x08000edd
 8000eb0:	08000f1f 	.word	0x08000f1f
 8000eb4:	08000f1f 	.word	0x08000f1f
 8000eb8:	08000f1f 	.word	0x08000f1f
 8000ebc:	08000f1f 	.word	0x08000f1f
 8000ec0:	08000f1f 	.word	0x08000f1f
 8000ec4:	08000f1f 	.word	0x08000f1f
 8000ec8:	08000f1f 	.word	0x08000f1f
 8000ecc:	08000f1f 	.word	0x08000f1f
 8000ed0:	08000ef5 	.word	0x08000ef5

			case SERVO_HORIZONTAL_POSITION_UP_COMMAND:

				SERVO_SET_POSITION_UP(&servo_horizontal);
 8000ed4:	4824      	ldr	r0, [pc, #144]	; (8000f68 <DECODE_MESSAGE+0x16c>)
 8000ed6:	f000 f915 	bl	8001104 <SERVO_SET_POSITION_UP>
				break;
 8000eda:	e036      	b.n	8000f4a <DECODE_MESSAGE+0x14e>

			case SERVO_HORIZONTAL_POSITION_DOWN_COMMAND:

				SERVO_SET_POSITION_DOWN(&servo_horizontal);
 8000edc:	4822      	ldr	r0, [pc, #136]	; (8000f68 <DECODE_MESSAGE+0x16c>)
 8000ede:	f000 f971 	bl	80011c4 <SERVO_SET_POSITION_DOWN>
				break;
 8000ee2:	e032      	b.n	8000f4a <DECODE_MESSAGE+0x14e>

			case SERVO_VERTICAL_POSITION_UP_COMMAND:

				SERVO_SET_POSITION_UP(&servo_vertical);
 8000ee4:	4821      	ldr	r0, [pc, #132]	; (8000f6c <DECODE_MESSAGE+0x170>)
 8000ee6:	f000 f90d 	bl	8001104 <SERVO_SET_POSITION_UP>
				break;
 8000eea:	e02e      	b.n	8000f4a <DECODE_MESSAGE+0x14e>

			case SERVO_VERTICAL_POSITION_DOWN_COMMAND:

				SERVO_SET_POSITION_DOWN(&servo_vertical);
 8000eec:	481f      	ldr	r0, [pc, #124]	; (8000f6c <DECODE_MESSAGE+0x170>)
 8000eee:	f000 f969 	bl	80011c4 <SERVO_SET_POSITION_DOWN>
				break;
 8000ef2:	e02a      	b.n	8000f4a <DECODE_MESSAGE+0x14e>

			case GET_SERVO_POSITION_COMMAND:
				sprintf(get_position_message, "POSITION Horizontal: %d, Vertical: %d \n\r", servo_horizontal.position, servo_vertical.position);
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <DECODE_MESSAGE+0x16c>)
 8000ef6:	7a1b      	ldrb	r3, [r3, #8]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <DECODE_MESSAGE+0x170>)
 8000efc:	7a1b      	ldrb	r3, [r3, #8]
 8000efe:	491c      	ldr	r1, [pc, #112]	; (8000f70 <DECODE_MESSAGE+0x174>)
 8000f00:	481c      	ldr	r0, [pc, #112]	; (8000f74 <DECODE_MESSAGE+0x178>)
 8000f02:	f004 fd13 	bl	800592c <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)get_position_message, strlen(get_position_message), HAL_MAX_DELAY);
 8000f06:	481b      	ldr	r0, [pc, #108]	; (8000f74 <DECODE_MESSAGE+0x178>)
 8000f08:	f7ff f982 	bl	8000210 <strlen>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295
 8000f14:	4917      	ldr	r1, [pc, #92]	; (8000f74 <DECODE_MESSAGE+0x178>)
 8000f16:	4811      	ldr	r0, [pc, #68]	; (8000f5c <DECODE_MESSAGE+0x160>)
 8000f18:	f003 feb7 	bl	8004c8a <HAL_UART_Transmit>
				break;
 8000f1c:	e015      	b.n	8000f4a <DECODE_MESSAGE+0x14e>

			default:
				if(command_code != ENABLE_REMOTE_CONTROL_COMMAND){
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b0b      	cmp	r3, #11
 8000f22:	d011      	beq.n	8000f48 <DECODE_MESSAGE+0x14c>
				HAL_UART_Transmit(&huart1, (uint8_t*)invalid_command_message, strlen(invalid_command_message), HAL_MAX_DELAY);
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <DECODE_MESSAGE+0x17c>)
 8000f26:	681c      	ldr	r4, [r3, #0]
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <DECODE_MESSAGE+0x17c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff f96f 	bl	8000210 <strlen>
 8000f32:	4603      	mov	r3, r0
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	4621      	mov	r1, r4
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <DECODE_MESSAGE+0x160>)
 8000f3e:	f003 fea4 	bl	8004c8a <HAL_UART_Transmit>
				}
				break;
 8000f42:	e001      	b.n	8000f48 <DECODE_MESSAGE+0x14c>

		}
	}
 8000f44:	bf00      	nop
 8000f46:	e000      	b.n	8000f4a <DECODE_MESSAGE+0x14e>
				break;
 8000f48:	bf00      	nop

}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200000f9 	.word	0x200000f9
 8000f58:	2000001c 	.word	0x2000001c
 8000f5c:	20000218 	.word	0x20000218
 8000f60:	20000020 	.word	0x20000020
 8000f64:	20000024 	.word	0x20000024
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	2000000c 	.word	0x2000000c
 8000f70:	080063a4 	.word	0x080063a4
 8000f74:	200000d0 	.word	0x200000d0
 8000f78:	20000018 	.word	0x20000018

08000f7c <USART1_UART_Init>:
  * @brief USART2 INITIALIZATION, USART2 IS USED TO COMMUNICATE WITH HC-05 MODULE
  * @param None
  * @retval None
  */
static void USART1_UART_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <USART1_UART_Init+0x4c>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <USART1_UART_Init+0x50>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <USART1_UART_Init+0x4c>)
 8000f88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <USART1_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <USART1_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <USART1_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <USART1_UART_Init+0x4c>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <USART1_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <USART1_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <USART1_UART_Init+0x4c>)
 8000fb4:	f003 fe1c 	bl	8004bf0 <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fbe:	f000 f889 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000218 	.word	0x20000218
 8000fcc:	40011000 	.word	0x40011000

08000fd0 <HAL_UART_RxCpltCallback>:
  * VIA HC-05
  * @param None
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <HAL_UART_RxCpltCallback+0x80>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d132      	bne.n	8001048 <HAL_UART_RxCpltCallback+0x78>

		if(uart1_buffer != '\r' ){
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <HAL_UART_RxCpltCallback+0x84>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b0d      	cmp	r3, #13
 8000fe8:	d012      	beq.n	8001010 <HAL_UART_RxCpltCallback+0x40>
			phone_rcvd_msg[count] = uart1_buffer;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <HAL_UART_RxCpltCallback+0x88>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_UART_RxCpltCallback+0x84>)
 8000ff2:	7819      	ldrb	r1, [r3, #0]
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_UART_RxCpltCallback+0x8c>)
 8000ff6:	5499      	strb	r1, [r3, r2]
			count++;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_UART_RxCpltCallback+0x88>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_UART_RxCpltCallback+0x88>)
 8001002:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, &uart1_buffer, BUFFER_SIZE);
 8001004:	2201      	movs	r2, #1
 8001006:	4913      	ldr	r1, [pc, #76]	; (8001054 <HAL_UART_RxCpltCallback+0x84>)
 8001008:	4815      	ldr	r0, [pc, #84]	; (8001060 <HAL_UART_RxCpltCallback+0x90>)
 800100a:	f003 fed0 	bl	8004dae <HAL_UART_Receive_IT>
			count = 0;
			HAL_UART_Receive_IT(&huart1, &uart1_buffer, BUFFER_SIZE);
		}

	}
}
 800100e:	e01b      	b.n	8001048 <HAL_UART_RxCpltCallback+0x78>
			phone_rcvd_msg[count] = '\0';
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_UART_RxCpltCallback+0x88>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_UART_RxCpltCallback+0x8c>)
 8001018:	2100      	movs	r1, #0
 800101a:	5499      	strb	r1, [r3, r2]
			command_code = atoi(phone_rcvd_msg);
 800101c:	480f      	ldr	r0, [pc, #60]	; (800105c <HAL_UART_RxCpltCallback+0x8c>)
 800101e:	f004 fc4f 	bl	80058c0 <atoi>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]
			DECODE_MESSAGE(command_code);
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fee7 	bl	8000dfc <DECODE_MESSAGE>
			memset(&phone_rcvd_msg, 0, sizeof(phone_rcvd_msg));
 800102e:	2204      	movs	r2, #4
 8001030:	2100      	movs	r1, #0
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <HAL_UART_RxCpltCallback+0x8c>)
 8001034:	f004 fc72 	bl	800591c <memset>
			count = 0;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <HAL_UART_RxCpltCallback+0x88>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, &uart1_buffer, BUFFER_SIZE);
 800103e:	2201      	movs	r2, #1
 8001040:	4904      	ldr	r1, [pc, #16]	; (8001054 <HAL_UART_RxCpltCallback+0x84>)
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <HAL_UART_RxCpltCallback+0x90>)
 8001044:	f003 feb3 	bl	8004dae <HAL_UART_Receive_IT>
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40011000 	.word	0x40011000
 8001054:	2000025e 	.word	0x2000025e
 8001058:	200000f8 	.word	0x200000f8
 800105c:	20000160 	.word	0x20000160
 8001060:	20000218 	.word	0x20000218

08001064 <REFRESH_INFO_ON_LCD>:
/**
  * @brief DISPLAYING ACTUAL POSITION OF SERVOS ON LCD
  * @param None
  * @retval None
  */
void REFRESH_INFO_ON_LCD(void){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

	lcd16x2_i2c_clear();
 8001068:	f7ff fb9e 	bl	80007a8 <lcd16x2_i2c_clear>

	lcd16x2_i2c_setCursor(0,0);
 800106c:	2100      	movs	r1, #0
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff fb76 	bl	8000760 <lcd16x2_i2c_setCursor>
	lcd16x2_i2c_printf("Hor. pos,: %d", servo_horizontal.position);
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <REFRESH_INFO_ON_LCD+0x34>)
 8001076:	7a1b      	ldrb	r3, [r3, #8]
 8001078:	4619      	mov	r1, r3
 800107a:	4808      	ldr	r0, [pc, #32]	; (800109c <REFRESH_INFO_ON_LCD+0x38>)
 800107c:	f7ff fb9e 	bl	80007bc <lcd16x2_i2c_printf>

	lcd16x2_i2c_setCursor(1,0);
 8001080:	2100      	movs	r1, #0
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fb6c 	bl	8000760 <lcd16x2_i2c_setCursor>
	lcd16x2_i2c_printf("Ver. pos,: %d", servo_vertical.position);
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <REFRESH_INFO_ON_LCD+0x3c>)
 800108a:	7a1b      	ldrb	r3, [r3, #8]
 800108c:	4619      	mov	r1, r3
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <REFRESH_INFO_ON_LCD+0x40>)
 8001090:	f7ff fb94 	bl	80007bc <lcd16x2_i2c_printf>

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000000 	.word	0x20000000
 800109c:	080063d0 	.word	0x080063d0
 80010a0:	2000000c 	.word	0x2000000c
 80010a4:	080063e0 	.word	0x080063e0

080010a8 <delay>:
/**
  * @brief DELAY FUNCTION
  * @param DESIRED DELAY TIME IN ms
  * @retval None
  */
void delay(uint32_t delay_in_ms){
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

	delay_counter = delay_in_ms;
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <delay+0x28>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
	while(delay_counter > 0);
 80010b6:	bf00      	nop
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <delay+0x28>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1fb      	bne.n	80010b8 <delay+0x10>

}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000164 	.word	0x20000164

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b598      	push	{r3, r4, r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  HAL_UART_Transmit(&huart1, (uint8_t*)error_message, strlen(error_message), HAL_MAX_DELAY);
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <Error_Handler+0x28>)
 80010de:	681c      	ldr	r4, [r3, #0]
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <Error_Handler+0x28>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f893 	bl	8000210 <strlen>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	4621      	mov	r1, r4
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <Error_Handler+0x2c>)
 80010f6:	f003 fdc8 	bl	8004c8a <HAL_UART_Transmit>
  void ERROR_INFO_ON_LCD(void);

  while (1)
 80010fa:	e7fe      	b.n	80010fa <Error_Handler+0x26>
 80010fc:	20000028 	.word	0x20000028
 8001100:	20000218 	.word	0x20000218

08001104 <SERVO_SET_POSITION_UP>:
  * CALCULATIONS ARE BASED ON PROPORTION OF PULSE WITHDRAW AND POSITION
  * @param uint8_t position - DESIRED POSITION OF SERVO(0-180)
  * @param servo_handle_t *servo - POINTER TO SERVO HANDLE STRUCTURE
  * @retval None
  */
void SERVO_SET_POSITION_UP(servo_handle_t *servo){
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

	float tim_pulse_time_withdraw = SERVO_MIN_PULSE_WITHDRAW + ((float)((servo->position) + SERVO_POSITION_UP_OFFSET)*(float)SERVO_MIN_PULSE_WITHDRAW)/SERVO_MAX_POSITION;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7a1b      	ldrb	r3, [r3, #8]
 8001110:	3302      	adds	r3, #2
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111a:	eddf 6a29 	vldr	s13, [pc, #164]	; 80011c0 <SERVO_SET_POSITION_UP+0xbc>
 800111e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001126:	ee77 7a87 	vadd.f32	s15, s15, s14
 800112a:	edc7 7a03 	vstr	s15, [r7, #12]
	uint32_t tim_pulse_value = (uint32_t)((tim_pulse_time_withdraw*__HAL_TIM_GET_AUTORELOAD(servo->htim))/SERVO_PULSE_PERIOD);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800113e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001146:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800114a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001152:	ee17 3a90 	vmov	r3, s15
 8001156:	60bb      	str	r3, [r7, #8]
	if((servo->position) < 180){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7a1b      	ldrb	r3, [r3, #8]
 800115c:	2bb3      	cmp	r3, #179	; 0xb3
 800115e:	d805      	bhi.n	800116c <SERVO_SET_POSITION_UP+0x68>
	servo->position += SERVO_POSITION_UP_OFFSET;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7a1b      	ldrb	r3, [r3, #8]
 8001164:	3302      	adds	r3, #2
 8001166:	b2da      	uxtb	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	721a      	strb	r2, [r3, #8]
	}
	__HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, tim_pulse_value);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d105      	bne.n	8001180 <SERVO_SET_POSITION_UP+0x7c>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800117e:	e018      	b.n	80011b2 <SERVO_SET_POSITION_UP+0xae>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, tim_pulse_value);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b04      	cmp	r3, #4
 8001186:	d105      	bne.n	8001194 <SERVO_SET_POSITION_UP+0x90>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001192:	e00e      	b.n	80011b2 <SERVO_SET_POSITION_UP+0xae>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, tim_pulse_value);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b08      	cmp	r3, #8
 800119a:	d105      	bne.n	80011a8 <SERVO_SET_POSITION_UP+0xa4>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80011a6:	e004      	b.n	80011b2 <SERVO_SET_POSITION_UP+0xae>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, tim_pulse_value);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	43340000 	.word	0x43340000

080011c4 <SERVO_SET_POSITION_DOWN>:
  * @brief SETTING DOWN POSITION OF SERVO BY VALUE DEFINED IN SERVO HEADER FILE
  * CALCULATIONS ARE BASED ON PROPORTION OF PULSE WITHDRAW AND POSITION
  * @param servo_handle_t *servo - POINTER TO SERVO HANDLE STRUCTURE
  * @retval None
  */
void SERVO_SET_POSITION_DOWN(servo_handle_t *servo){
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

	float tim_pulse_time_withdraw = SERVO_MIN_PULSE_WITHDRAW + ((float)((servo->position) + SERVO_POSITION_DOWN_OFFSET)*(float)SERVO_MIN_PULSE_WITHDRAW)/SERVO_MAX_POSITION;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7a1b      	ldrb	r3, [r3, #8]
 80011d0:	3b02      	subs	r3, #2
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011da:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001278 <SERVO_SET_POSITION_DOWN+0xb4>
 80011de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ea:	edc7 7a03 	vstr	s15, [r7, #12]
	uint32_t tim_pulse_value = (uint32_t)((tim_pulse_time_withdraw*__HAL_TIM_GET_AUTORELOAD(servo->htim))/SERVO_PULSE_PERIOD);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001202:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001206:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800120a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001212:	ee17 3a90 	vmov	r3, s15
 8001216:	60bb      	str	r3, [r7, #8]

	if((servo->position) > -1){
		servo->position += SERVO_POSITION_DOWN_OFFSET;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7a1b      	ldrb	r3, [r3, #8]
 800121c:	3b02      	subs	r3, #2
 800121e:	b2da      	uxtb	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	721a      	strb	r2, [r3, #8]
	}

	__HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, tim_pulse_value);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d105      	bne.n	8001238 <SERVO_SET_POSITION_DOWN+0x74>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001236:	e018      	b.n	800126a <SERVO_SET_POSITION_DOWN+0xa6>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, tim_pulse_value);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b04      	cmp	r3, #4
 800123e:	d105      	bne.n	800124c <SERVO_SET_POSITION_DOWN+0x88>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	6393      	str	r3, [r2, #56]	; 0x38
}
 800124a:	e00e      	b.n	800126a <SERVO_SET_POSITION_DOWN+0xa6>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, tim_pulse_value);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b08      	cmp	r3, #8
 8001252:	d105      	bne.n	8001260 <SERVO_SET_POSITION_DOWN+0x9c>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800125e:	e004      	b.n	800126a <SERVO_SET_POSITION_DOWN+0xa6>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, tim_pulse_value);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	43340000 	.word	0x43340000

0800127c <SERVO_SET_NEUTRAL_POSITION>:
  * IN THIS PROJECT 90 IS CONSIDERED AS NEUTRAL POSITION
  * CALCULATIONS ARE BASED ON PROPORTION OF PULSE WITHDRAW AND POSITION
  * @param servo_handle_t *servo - POINTER TO SERVO HANDLE STRUCTURE
  * @retval None
  */
void SERVO_SET_NEUTRAL_POSITION(servo_handle_t *servo){
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

	float tim_pulse_time_withdraw = SERVO_MIN_PULSE_WITHDRAW + ((float)SERVO_NEUTRAL_POSITION*(float)SERVO_MIN_PULSE_WITHDRAW)/SERVO_MAX_POSITION;
 8001284:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001288:	60fb      	str	r3, [r7, #12]
	uint32_t tim_pulse_value =(uint32_t) ((tim_pulse_time_withdraw*__HAL_TIM_GET_AUTORELOAD(servo->htim))/SERVO_PULSE_PERIOD);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800129a:	edd7 7a03 	vldr	s15, [r7, #12]
 800129e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80012a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ae:	ee17 3a90 	vmov	r3, s15
 80012b2:	60bb      	str	r3, [r7, #8]

	servo->position = SERVO_NEUTRAL_POSITION;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	225a      	movs	r2, #90	; 0x5a
 80012b8:	721a      	strb	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, tim_pulse_value);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d105      	bne.n	80012ce <SERVO_SET_NEUTRAL_POSITION+0x52>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012cc:	e018      	b.n	8001300 <SERVO_SET_NEUTRAL_POSITION+0x84>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, tim_pulse_value);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d105      	bne.n	80012e2 <SERVO_SET_NEUTRAL_POSITION+0x66>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012e0:	e00e      	b.n	8001300 <SERVO_SET_NEUTRAL_POSITION+0x84>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, tim_pulse_value);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d105      	bne.n	80012f6 <SERVO_SET_NEUTRAL_POSITION+0x7a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80012f4:	e004      	b.n	8001300 <SERVO_SET_NEUTRAL_POSITION+0x84>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, tim_pulse_value);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <HAL_MspInit+0x4c>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_MspInit+0x4c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_MspInit+0x4c>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_MspInit+0x4c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a24      	ldr	r2, [pc, #144]	; (800140c <HAL_ADC_MspInit+0xb0>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d141      	bne.n	8001402 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b23      	ldr	r3, [pc, #140]	; (8001410 <HAL_ADC_MspInit+0xb4>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a22      	ldr	r2, [pc, #136]	; (8001410 <HAL_ADC_MspInit+0xb4>)
 8001388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_ADC_MspInit+0xb4>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <HAL_ADC_MspInit+0xb4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <HAL_ADC_MspInit+0xb4>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_ADC_MspInit+0xb4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_ADC_MspInit+0xb4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a14      	ldr	r2, [pc, #80]	; (8001410 <HAL_ADC_MspInit+0xb4>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_ADC_MspInit+0xb4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80013d2:	2313      	movs	r3, #19
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d6:	2303      	movs	r3, #3
 80013d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	480b      	ldr	r0, [pc, #44]	; (8001414 <HAL_ADC_MspInit+0xb8>)
 80013e6:	f001 f815 	bl	8002414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ea:	2301      	movs	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ee:	2303      	movs	r3, #3
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <HAL_ADC_MspInit+0xbc>)
 80013fe:	f001 f809 	bl	8002414 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40012000 	.word	0x40012000
 8001410:	40023800 	.word	0x40023800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400

0800141c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_I2C_MspInit+0x84>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d12b      	bne.n	8001496 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800145a:	23c0      	movs	r3, #192	; 0xc0
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145e:	2312      	movs	r3, #18
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001462:	2301      	movs	r3, #1
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146a:	2304      	movs	r3, #4
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <HAL_I2C_MspInit+0x8c>)
 8001476:	f000 ffcd 	bl	8002414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001484:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40005400 	.word	0x40005400
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400

080014ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_TIM_Base_MspInit+0x48>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d115      	bne.n	80014ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_TIM_Base_MspInit+0x4c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <HAL_TIM_Base_MspInit+0x4c>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_TIM_Base_MspInit+0x4c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	201d      	movs	r0, #29
 80014e0:	f000 fecf 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014e4:	201d      	movs	r0, #29
 80014e6:	f000 fee8 	bl	80022ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40000400 	.word	0x40000400
 80014f8:	40023800 	.word	0x40023800

080014fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_TIM_MspPostInit+0x68>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d11e      	bne.n	800155c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_TIM_MspPostInit+0x6c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_TIM_MspPostInit+0x6c>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_TIM_MspPostInit+0x6c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800153a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800153e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800154c:	2302      	movs	r3, #2
 800154e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	4619      	mov	r1, r3
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <HAL_TIM_MspPostInit+0x70>)
 8001558:	f000 ff5c 	bl	8002414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40000400 	.word	0x40000400
 8001568:	40023800 	.word	0x40023800
 800156c:	40020800 	.word	0x40020800

08001570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]


  if(huart->Instance==USART1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_UART_MspInit+0x94>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d134      	bne.n	80015fc <HAL_UART_MspInit+0x8c>
   {

     /* Peripheral clock enable */
     __HAL_RCC_USART1_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_UART_MspInit+0x98>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <HAL_UART_MspInit+0x98>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_UART_MspInit+0x98>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]

     __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_UART_MspInit+0x98>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_UART_MspInit+0x98>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_UART_MspInit+0x98>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
     /**USART2 GPIO Configuration
     PA2     ------> USART2_TX
     PA3     ------> USART2_RX
     */
     GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015ce:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	623b      	str	r3, [r7, #32]
     GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015dc:	2307      	movs	r3, #7
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4809      	ldr	r0, [pc, #36]	; (800160c <HAL_UART_MspInit+0x9c>)
 80015e8:	f000 ff14 	bl	8002414 <HAL_GPIO_Init>

     /* USART2 interrupt Init */
     HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2025      	movs	r0, #37	; 0x25
 80015f2:	f000 fe46 	bl	8002282 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015f6:	2025      	movs	r0, #37	; 0x25
 80015f8:	f000 fe5f 	bl	80022ba <HAL_NVIC_EnableIRQ>
   /* USER CODE BEGIN USART2_MspInit 1 */

   /* USER CODE END USART2_MspInit 1 */
   }

}
 80015fc:	bf00      	nop
 80015fe:	3728      	adds	r7, #40	; 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40011000 	.word	0x40011000
 8001608:	40023800 	.word	0x40023800
 800160c:	40020000 	.word	0x40020000

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <NMI_Handler+0x4>

08001616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <MemManage_Handler+0x4>

08001622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler+0x4>

0800162e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165c:	f000 f8e2 	bl	8001824 <HAL_IncTick>
  if(delay_counter >= 0){
	  delay_counter--;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <SysTick_Handler+0x18>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3b01      	subs	r3, #1
 8001666:	4a02      	ldr	r2, [pc, #8]	; (8001670 <SysTick_Handler+0x18>)
 8001668:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000164 	.word	0x20000164

08001674 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <TIM3_IRQHandler+0x10>)
 800167a:	f002 fc5d 	bl	8003f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000188 	.word	0x20000188

08001688 <USART1_IRQHandler>:


/* USER CODE BEGIN 1 */
void USART1_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <USART1_IRQHandler+0x10>)
 800168e:	f003 fbbf 	bl	8004e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000218 	.word	0x20000218

0800169c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <_sbrk+0x5c>)
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <_sbrk+0x60>)
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <_sbrk+0x64>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <_sbrk+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d207      	bcs.n	80016dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016cc:	f004 f8fc 	bl	80058c8 <__errno>
 80016d0:	4603      	mov	r3, r0
 80016d2:	220c      	movs	r2, #12
 80016d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e009      	b.n	80016f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <_sbrk+0x64>)
 80016ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20020000 	.word	0x20020000
 80016fc:	00000400 	.word	0x00000400
 8001700:	200000fc 	.word	0x200000fc
 8001704:	200002d0 	.word	0x200002d0

08001708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <SystemInit+0x20>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <SystemInit+0x20>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001764 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001732:	490e      	ldr	r1, [pc, #56]	; (800176c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001748:	4c0b      	ldr	r4, [pc, #44]	; (8001778 <LoopFillZerobss+0x26>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001756:	f7ff ffd7 	bl	8001708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175a:	f004 f8bb 	bl	80058d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175e:	f7ff f85d 	bl	800081c <main>
  bx  lr    
 8001762:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001770:	08006564 	.word	0x08006564
  ldr r2, =_sbss
 8001774:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001778:	200002d0 	.word	0x200002d0

0800177c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC_IRQHandler>
	...

08001780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <HAL_Init+0x40>)
 800178a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_Init+0x40>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_Init+0x40>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 fd5f 	bl	800226c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	2000      	movs	r0, #0
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fdaa 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fd77 	bl	80022d6 <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 fd3f 	bl	8002282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	2000002c 	.word	0x2000002c
 800181c:	20000034 	.word	0x20000034
 8001820:	20000030 	.word	0x20000030

08001824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000034 	.word	0x20000034
 8001848:	200002bc 	.word	0x200002bc

0800184c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200002bc 	.word	0x200002bc

08001864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff ffee 	bl	800184c <HAL_GetTick>
 8001870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d005      	beq.n	800188a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_Delay+0x44>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800188a:	bf00      	nop
 800188c:	f7ff ffde 	bl	800184c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8f7      	bhi.n	800188c <HAL_Delay+0x28>
  {
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000034 	.word	0x20000034

080018ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e033      	b.n	800192a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fd46 	bl	800135c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d118      	bne.n	800191c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018f2:	f023 0302 	bic.w	r3, r3, #2
 80018f6:	f043 0202 	orr.w	r2, r3, #2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fae8 	bl	8001ed4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
 800191a:	e001      	b.n	8001920 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_ADC_Start+0x1a>
 800194a:	2302      	movs	r3, #2
 800194c:	e0b2      	b.n	8001ab4 <HAL_ADC_Start+0x180>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b01      	cmp	r3, #1
 8001962:	d018      	beq.n	8001996 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001974:	4b52      	ldr	r3, [pc, #328]	; (8001ac0 <HAL_ADC_Start+0x18c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_ADC_Start+0x190>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	0c9a      	lsrs	r2, r3, #18
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001988:	e002      	b.n	8001990 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3b01      	subs	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f9      	bne.n	800198a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d17a      	bne.n	8001a9a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d007      	beq.n	80019d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e2:	d106      	bne.n	80019f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	f023 0206 	bic.w	r2, r3, #6
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	645a      	str	r2, [r3, #68]	; 0x44
 80019f0:	e002      	b.n	80019f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a00:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <HAL_ADC_Start+0x194>)
 8001a02:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a0c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d12a      	bne.n	8001a70 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a2b      	ldr	r2, [pc, #172]	; (8001acc <HAL_ADC_Start+0x198>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d015      	beq.n	8001a50 <HAL_ADC_Start+0x11c>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a29      	ldr	r2, [pc, #164]	; (8001ad0 <HAL_ADC_Start+0x19c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d105      	bne.n	8001a3a <HAL_ADC_Start+0x106>
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <HAL_ADC_Start+0x194>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00a      	beq.n	8001a50 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a25      	ldr	r2, [pc, #148]	; (8001ad4 <HAL_ADC_Start+0x1a0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d136      	bne.n	8001ab2 <HAL_ADC_Start+0x17e>
 8001a44:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_ADC_Start+0x194>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d130      	bne.n	8001ab2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d129      	bne.n	8001ab2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	e020      	b.n	8001ab2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a15      	ldr	r2, [pc, #84]	; (8001acc <HAL_ADC_Start+0x198>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d11b      	bne.n	8001ab2 <HAL_ADC_Start+0x17e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d114      	bne.n	8001ab2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	e00b      	b.n	8001ab2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f043 0210 	orr.w	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f043 0201 	orr.w	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	2000002c 	.word	0x2000002c
 8001ac4:	431bde83 	.word	0x431bde83
 8001ac8:	40012300 	.word	0x40012300
 8001acc:	40012000 	.word	0x40012000
 8001ad0:	40012100 	.word	0x40012100
 8001ad4:	40012200 	.word	0x40012200

08001ad8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_Stop+0x16>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e021      	b.n	8001b32 <HAL_ADC_Stop+0x5a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0201 	bic.w	r2, r2, #1
 8001b04:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d109      	bne.n	8001b28 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	f043 0201 	orr.w	r2, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b5a:	d113      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b6a:	d10b      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f043 0220 	orr.w	r2, r3, #32
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e063      	b.n	8001c4c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b84:	f7ff fe62 	bl	800184c <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b8a:	e021      	b.n	8001bd0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b92:	d01d      	beq.n	8001bd0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <HAL_ADC_PollForConversion+0x6c>
 8001b9a:	f7ff fe57 	bl	800184c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d212      	bcs.n	8001bd0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d00b      	beq.n	8001bd0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f043 0204 	orr.w	r2, r3, #4
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e03d      	b.n	8001c4c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d1d6      	bne.n	8001b8c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f06f 0212 	mvn.w	r2, #18
 8001be6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d123      	bne.n	8001c4a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d11f      	bne.n	8001c4a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d111      	bne.n	8001c4a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d105      	bne.n	8001c4a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f043 0201 	orr.w	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1c>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e113      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x244>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	d925      	bls.n	8001ce8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68d9      	ldr	r1, [r3, #12]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b1e      	subs	r3, #30
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68d9      	ldr	r1, [r3, #12]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4403      	add	r3, r0
 8001cda:	3b1e      	subs	r3, #30
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	e022      	b.n	8001d2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6919      	ldr	r1, [r3, #16]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	400a      	ands	r2, r1
 8001d0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6919      	ldr	r1, [r3, #16]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	4603      	mov	r3, r0
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4403      	add	r3, r0
 8001d24:	409a      	lsls	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d824      	bhi.n	8001d80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	3b05      	subs	r3, #5
 8001d48:	221f      	movs	r2, #31
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	400a      	ands	r2, r1
 8001d56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4618      	mov	r0, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b05      	subs	r3, #5
 8001d72:	fa00 f203 	lsl.w	r2, r0, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d7e:	e04c      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d824      	bhi.n	8001dd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	3b23      	subs	r3, #35	; 0x23
 8001d9a:	221f      	movs	r2, #31
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43da      	mvns	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	400a      	ands	r2, r1
 8001da8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3b23      	subs	r3, #35	; 0x23
 8001dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd0:	e023      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	3b41      	subs	r3, #65	; 0x41
 8001de4:	221f      	movs	r2, #31
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	400a      	ands	r2, r1
 8001df2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b41      	subs	r3, #65	; 0x41
 8001e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e1a:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <HAL_ADC_ConfigChannel+0x250>)
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a28      	ldr	r2, [pc, #160]	; (8001ec4 <HAL_ADC_ConfigChannel+0x254>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d10f      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1d8>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b12      	cmp	r3, #18
 8001e2e:	d10b      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1d      	ldr	r2, [pc, #116]	; (8001ec4 <HAL_ADC_ConfigChannel+0x254>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12b      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x23a>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <HAL_ADC_ConfigChannel+0x258>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d003      	beq.n	8001e64 <HAL_ADC_ConfigChannel+0x1f4>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b11      	cmp	r3, #17
 8001e62:	d122      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a11      	ldr	r2, [pc, #68]	; (8001ec8 <HAL_ADC_ConfigChannel+0x258>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d111      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_ADC_ConfigChannel+0x25c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a11      	ldr	r2, [pc, #68]	; (8001ed0 <HAL_ADC_ConfigChannel+0x260>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	0c9a      	lsrs	r2, r3, #18
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e9c:	e002      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f9      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40012300 	.word	0x40012300
 8001ec4:	40012000 	.word	0x40012000
 8001ec8:	10000012 	.word	0x10000012
 8001ecc:	2000002c 	.word	0x2000002c
 8001ed0:	431bde83 	.word	0x431bde83

08001ed4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001edc:	4b79      	ldr	r3, [pc, #484]	; (80020c4 <ADC_Init+0x1f0>)
 8001ede:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	021a      	lsls	r2, r3, #8
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6859      	ldr	r1, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6899      	ldr	r1, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	4a58      	ldr	r2, [pc, #352]	; (80020c8 <ADC_Init+0x1f4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d022      	beq.n	8001fb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6899      	ldr	r1, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6899      	ldr	r1, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	e00f      	b.n	8001fd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0202 	bic.w	r2, r2, #2
 8001fe0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6899      	ldr	r1, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7e1b      	ldrb	r3, [r3, #24]
 8001fec:	005a      	lsls	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01b      	beq.n	8002038 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800200e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800201e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6859      	ldr	r1, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	3b01      	subs	r3, #1
 800202c:	035a      	lsls	r2, r3, #13
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	e007      	b.n	8002048 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002046:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	3b01      	subs	r3, #1
 8002064:	051a      	lsls	r2, r3, #20
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800207c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6899      	ldr	r1, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800208a:	025a      	lsls	r2, r3, #9
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6899      	ldr	r1, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	029a      	lsls	r2, r3, #10
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	609a      	str	r2, [r3, #8]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	40012300 	.word	0x40012300
 80020c8:	0f000001 	.word	0x0f000001

080020cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e8:	4013      	ands	r3, r2
 80020ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fe:	4a04      	ldr	r2, [pc, #16]	; (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	60d3      	str	r3, [r2, #12]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <__NVIC_GetPriorityGrouping+0x18>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	f003 0307 	and.w	r3, r3, #7
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	2b00      	cmp	r3, #0
 8002140:	db0b      	blt.n	800215a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	f003 021f 	and.w	r2, r3, #31
 8002148:	4907      	ldr	r1, [pc, #28]	; (8002168 <__NVIC_EnableIRQ+0x38>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	2001      	movs	r0, #1
 8002152:	fa00 f202 	lsl.w	r2, r0, r2
 8002156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000e100 	.word	0xe000e100

0800216c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	6039      	str	r1, [r7, #0]
 8002176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	2b00      	cmp	r3, #0
 800217e:	db0a      	blt.n	8002196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	b2da      	uxtb	r2, r3
 8002184:	490c      	ldr	r1, [pc, #48]	; (80021b8 <__NVIC_SetPriority+0x4c>)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	0112      	lsls	r2, r2, #4
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	440b      	add	r3, r1
 8002190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002194:	e00a      	b.n	80021ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4908      	ldr	r1, [pc, #32]	; (80021bc <__NVIC_SetPriority+0x50>)
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	3b04      	subs	r3, #4
 80021a4:	0112      	lsls	r2, r2, #4
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	440b      	add	r3, r1
 80021aa:	761a      	strb	r2, [r3, #24]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000e100 	.word	0xe000e100
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f1c3 0307 	rsb	r3, r3, #7
 80021da:	2b04      	cmp	r3, #4
 80021dc:	bf28      	it	cs
 80021de:	2304      	movcs	r3, #4
 80021e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3304      	adds	r3, #4
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	d902      	bls.n	80021f0 <NVIC_EncodePriority+0x30>
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3b03      	subs	r3, #3
 80021ee:	e000      	b.n	80021f2 <NVIC_EncodePriority+0x32>
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	f04f 32ff 	mov.w	r2, #4294967295
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43da      	mvns	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	401a      	ands	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002208:	f04f 31ff 	mov.w	r1, #4294967295
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	43d9      	mvns	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	4313      	orrs	r3, r2
         );
}
 800221a:	4618      	mov	r0, r3
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002238:	d301      	bcc.n	800223e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223a:	2301      	movs	r3, #1
 800223c:	e00f      	b.n	800225e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223e:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <SysTick_Config+0x40>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002246:	210f      	movs	r1, #15
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f7ff ff8e 	bl	800216c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <SysTick_Config+0x40>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <SysTick_Config+0x40>)
 8002258:	2207      	movs	r2, #7
 800225a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	e000e010 	.word	0xe000e010

0800226c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ff29 	bl	80020cc <__NVIC_SetPriorityGrouping>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002282:	b580      	push	{r7, lr}
 8002284:	b086      	sub	sp, #24
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002294:	f7ff ff3e 	bl	8002114 <__NVIC_GetPriorityGrouping>
 8002298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	6978      	ldr	r0, [r7, #20]
 80022a0:	f7ff ff8e 	bl	80021c0 <NVIC_EncodePriority>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff5d 	bl	800216c <__NVIC_SetPriority>
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff31 	bl	8002130 <__NVIC_EnableIRQ>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffa2 	bl	8002228 <SysTick_Config>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022fc:	f7ff faa6 	bl	800184c <HAL_GetTick>
 8002300:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d008      	beq.n	8002320 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2280      	movs	r2, #128	; 0x80
 8002312:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e052      	b.n	80023c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0216 	bic.w	r2, r2, #22
 800232e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800233e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d103      	bne.n	8002350 <HAL_DMA_Abort+0x62>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0208 	bic.w	r2, r2, #8
 800235e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002370:	e013      	b.n	800239a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002372:	f7ff fa6b 	bl	800184c <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b05      	cmp	r3, #5
 800237e:	d90c      	bls.n	800239a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e015      	b.n	80023c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e4      	bne.n	8002372 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ac:	223f      	movs	r2, #63	; 0x3f
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d004      	beq.n	80023ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e00c      	b.n	8002406 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2205      	movs	r2, #5
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e165      	b.n	80026fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002430:	2201      	movs	r2, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	f040 8154 	bne.w	80026f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d005      	beq.n	8002466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002462:	2b02      	cmp	r3, #2
 8002464:	d130      	bne.n	80024c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 0201 	and.w	r2, r3, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d017      	beq.n	8002504 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d123      	bne.n	8002558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	08da      	lsrs	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80ae 	beq.w	80026f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b5d      	ldr	r3, [pc, #372]	; (8002714 <HAL_GPIO_Init+0x300>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	4a5c      	ldr	r2, [pc, #368]	; (8002714 <HAL_GPIO_Init+0x300>)
 80025a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a8:	6453      	str	r3, [r2, #68]	; 0x44
 80025aa:	4b5a      	ldr	r3, [pc, #360]	; (8002714 <HAL_GPIO_Init+0x300>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b6:	4a58      	ldr	r2, [pc, #352]	; (8002718 <HAL_GPIO_Init+0x304>)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4f      	ldr	r2, [pc, #316]	; (800271c <HAL_GPIO_Init+0x308>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d025      	beq.n	800262e <HAL_GPIO_Init+0x21a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4e      	ldr	r2, [pc, #312]	; (8002720 <HAL_GPIO_Init+0x30c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d01f      	beq.n	800262a <HAL_GPIO_Init+0x216>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4d      	ldr	r2, [pc, #308]	; (8002724 <HAL_GPIO_Init+0x310>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d019      	beq.n	8002626 <HAL_GPIO_Init+0x212>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4c      	ldr	r2, [pc, #304]	; (8002728 <HAL_GPIO_Init+0x314>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_GPIO_Init+0x20e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4b      	ldr	r2, [pc, #300]	; (800272c <HAL_GPIO_Init+0x318>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00d      	beq.n	800261e <HAL_GPIO_Init+0x20a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4a      	ldr	r2, [pc, #296]	; (8002730 <HAL_GPIO_Init+0x31c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d007      	beq.n	800261a <HAL_GPIO_Init+0x206>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a49      	ldr	r2, [pc, #292]	; (8002734 <HAL_GPIO_Init+0x320>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <HAL_GPIO_Init+0x202>
 8002612:	2306      	movs	r3, #6
 8002614:	e00c      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 8002616:	2307      	movs	r3, #7
 8002618:	e00a      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 800261a:	2305      	movs	r3, #5
 800261c:	e008      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 800261e:	2304      	movs	r3, #4
 8002620:	e006      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 8002622:	2303      	movs	r3, #3
 8002624:	e004      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 8002626:	2302      	movs	r3, #2
 8002628:	e002      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 800262e:	2300      	movs	r3, #0
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	f002 0203 	and.w	r2, r2, #3
 8002636:	0092      	lsls	r2, r2, #2
 8002638:	4093      	lsls	r3, r2
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002640:	4935      	ldr	r1, [pc, #212]	; (8002718 <HAL_GPIO_Init+0x304>)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	3302      	adds	r3, #2
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800264e:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <HAL_GPIO_Init+0x324>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002672:	4a31      	ldr	r2, [pc, #196]	; (8002738 <HAL_GPIO_Init+0x324>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HAL_GPIO_Init+0x324>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269c:	4a26      	ldr	r2, [pc, #152]	; (8002738 <HAL_GPIO_Init+0x324>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a2:	4b25      	ldr	r3, [pc, #148]	; (8002738 <HAL_GPIO_Init+0x324>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c6:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <HAL_GPIO_Init+0x324>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <HAL_GPIO_Init+0x324>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f0:	4a11      	ldr	r2, [pc, #68]	; (8002738 <HAL_GPIO_Init+0x324>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3301      	adds	r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b0f      	cmp	r3, #15
 8002700:	f67f ae96 	bls.w	8002430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3724      	adds	r7, #36	; 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	40013800 	.word	0x40013800
 800271c:	40020000 	.word	0x40020000
 8002720:	40020400 	.word	0x40020400
 8002724:	40020800 	.word	0x40020800
 8002728:	40020c00 	.word	0x40020c00
 800272c:	40021000 	.word	0x40021000
 8002730:	40021400 	.word	0x40021400
 8002734:	40021800 	.word	0x40021800
 8002738:	40013c00 	.word	0x40013c00

0800273c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e12b      	b.n	80029a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fe5a 	bl	800141c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	; 0x24
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800278e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800279e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a0:	f000 fe38 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 80027a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4a81      	ldr	r2, [pc, #516]	; (80029b0 <HAL_I2C_Init+0x274>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d807      	bhi.n	80027c0 <HAL_I2C_Init+0x84>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a80      	ldr	r2, [pc, #512]	; (80029b4 <HAL_I2C_Init+0x278>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	bf94      	ite	ls
 80027b8:	2301      	movls	r3, #1
 80027ba:	2300      	movhi	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	e006      	b.n	80027ce <HAL_I2C_Init+0x92>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a7d      	ldr	r2, [pc, #500]	; (80029b8 <HAL_I2C_Init+0x27c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bf94      	ite	ls
 80027c8:	2301      	movls	r3, #1
 80027ca:	2300      	movhi	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0e7      	b.n	80029a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a78      	ldr	r2, [pc, #480]	; (80029bc <HAL_I2C_Init+0x280>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0c9b      	lsrs	r3, r3, #18
 80027e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4a6a      	ldr	r2, [pc, #424]	; (80029b0 <HAL_I2C_Init+0x274>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d802      	bhi.n	8002810 <HAL_I2C_Init+0xd4>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	3301      	adds	r3, #1
 800280e:	e009      	b.n	8002824 <HAL_I2C_Init+0xe8>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	4a69      	ldr	r2, [pc, #420]	; (80029c0 <HAL_I2C_Init+0x284>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	3301      	adds	r3, #1
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	430b      	orrs	r3, r1
 800282a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002836:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	495c      	ldr	r1, [pc, #368]	; (80029b0 <HAL_I2C_Init+0x274>)
 8002840:	428b      	cmp	r3, r1
 8002842:	d819      	bhi.n	8002878 <HAL_I2C_Init+0x13c>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1e59      	subs	r1, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002852:	1c59      	adds	r1, r3, #1
 8002854:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002858:	400b      	ands	r3, r1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_I2C_Init+0x138>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1e59      	subs	r1, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fbb1 f3f3 	udiv	r3, r1, r3
 800286c:	3301      	adds	r3, #1
 800286e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002872:	e051      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 8002874:	2304      	movs	r3, #4
 8002876:	e04f      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <HAL_I2C_Init+0x168>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	440b      	add	r3, r1
 800288e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	e012      	b.n	80028ca <HAL_I2C_Init+0x18e>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1e58      	subs	r0, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	0099      	lsls	r1, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Init+0x196>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e022      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10e      	bne.n	80028f8 <HAL_I2C_Init+0x1bc>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1e58      	subs	r0, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	440b      	add	r3, r1
 80028e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f6:	e00f      	b.n	8002918 <HAL_I2C_Init+0x1dc>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1e58      	subs	r0, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	0099      	lsls	r1, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	fbb0 f3f3 	udiv	r3, r0, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	6809      	ldr	r1, [r1, #0]
 800291c:	4313      	orrs	r3, r2
 800291e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6911      	ldr	r1, [r2, #16]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68d2      	ldr	r2, [r2, #12]
 8002952:	4311      	orrs	r1, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	430b      	orrs	r3, r1
 800295a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	000186a0 	.word	0x000186a0
 80029b4:	001e847f 	.word	0x001e847f
 80029b8:	003d08ff 	.word	0x003d08ff
 80029bc:	431bde83 	.word	0x431bde83
 80029c0:	10624dd3 	.word	0x10624dd3

080029c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	461a      	mov	r2, r3
 80029d0:	460b      	mov	r3, r1
 80029d2:	817b      	strh	r3, [r7, #10]
 80029d4:	4613      	mov	r3, r2
 80029d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7fe ff38 	bl	800184c <HAL_GetTick>
 80029dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	f040 80e0 	bne.w	8002bac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2319      	movs	r3, #25
 80029f2:	2201      	movs	r2, #1
 80029f4:	4970      	ldr	r1, [pc, #448]	; (8002bb8 <HAL_I2C_Master_Transmit+0x1f4>)
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 fa92 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
 8002a04:	e0d3      	b.n	8002bae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_I2C_Master_Transmit+0x50>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e0cc      	b.n	8002bae <HAL_I2C_Master_Transmit+0x1ea>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d007      	beq.n	8002a3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2221      	movs	r2, #33	; 0x21
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2210      	movs	r2, #16
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	893a      	ldrh	r2, [r7, #8]
 8002a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4a50      	ldr	r2, [pc, #320]	; (8002bbc <HAL_I2C_Master_Transmit+0x1f8>)
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a7c:	8979      	ldrh	r1, [r7, #10]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f9ca 	bl	8002e1c <I2C_MasterRequestWrite>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e08d      	b.n	8002bae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002aa8:	e066      	b.n	8002b78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	6a39      	ldr	r1, [r7, #32]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fb0c 	bl	80030cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d107      	bne.n	8002ad2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e06b      	b.n	8002bae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d11b      	bne.n	8002b4c <HAL_I2C_Master_Transmit+0x188>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d017      	beq.n	8002b4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	6a39      	ldr	r1, [r7, #32]
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 fafc 	bl	800314e <I2C_WaitOnBTFFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d107      	bne.n	8002b74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e01a      	b.n	8002bae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d194      	bne.n	8002aaa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	00100002 	.word	0x00100002
 8002bbc:	ffff0000 	.word	0xffff0000

08002bc0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002bd0:	f7fe fe3c 	bl	800184c <HAL_GetTick>
 8002bd4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	f040 8111 	bne.w	8002e0a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	2319      	movs	r3, #25
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4988      	ldr	r1, [pc, #544]	; (8002e14 <HAL_I2C_IsDeviceReady+0x254>)
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f994 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e104      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_I2C_IsDeviceReady+0x50>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e0fd      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x24c>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d007      	beq.n	8002c36 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2224      	movs	r2, #36	; 0x24
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a70      	ldr	r2, [pc, #448]	; (8002e18 <HAL_I2C_IsDeviceReady+0x258>)
 8002c58:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c68:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f952 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c90:	d103      	bne.n	8002c9a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e0b6      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c9e:	897b      	ldrh	r3, [r7, #10]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002cae:	f7fe fdcd 	bl	800184c <HAL_GetTick>
 8002cb2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	bf0c      	ite	eq
 8002cc2:	2301      	moveq	r3, #1
 8002cc4:	2300      	movne	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ce2:	e025      	b.n	8002d30 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ce4:	f7fe fdb2 	bl	800184c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d302      	bcc.n	8002cfa <HAL_I2C_IsDeviceReady+0x13a>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d103      	bne.n	8002d02 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	22a0      	movs	r2, #160	; 0xa0
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2ba0      	cmp	r3, #160	; 0xa0
 8002d3a:	d005      	beq.n	8002d48 <HAL_I2C_IsDeviceReady+0x188>
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <HAL_I2C_IsDeviceReady+0x188>
 8002d42:	7dbb      	ldrb	r3, [r7, #22]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0cd      	beq.n	8002ce4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d129      	bne.n	8002db2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	2319      	movs	r3, #25
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4921      	ldr	r1, [pc, #132]	; (8002e14 <HAL_I2C_IsDeviceReady+0x254>)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f8c6 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e036      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e02c      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2319      	movs	r3, #25
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	490f      	ldr	r1, [pc, #60]	; (8002e14 <HAL_I2C_IsDeviceReady+0x254>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f8a2 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e012      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	3301      	adds	r3, #1
 8002dea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	f4ff af32 	bcc.w	8002c5a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e0a:	2302      	movs	r3, #2
  }
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3720      	adds	r7, #32
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	00100002 	.word	0x00100002
 8002e18:	ffff0000 	.word	0xffff0000

08002e1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d006      	beq.n	8002e46 <I2C_MasterRequestWrite+0x2a>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d003      	beq.n	8002e46 <I2C_MasterRequestWrite+0x2a>
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e44:	d108      	bne.n	8002e58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	e00b      	b.n	8002e70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	2b12      	cmp	r3, #18
 8002e5e:	d107      	bne.n	8002e70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f84f 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00d      	beq.n	8002ea4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e96:	d103      	bne.n	8002ea0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e035      	b.n	8002f10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eac:	d108      	bne.n	8002ec0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eae:	897b      	ldrh	r3, [r7, #10]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ebc:	611a      	str	r2, [r3, #16]
 8002ebe:	e01b      	b.n	8002ef8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ec0:	897b      	ldrh	r3, [r7, #10]
 8002ec2:	11db      	asrs	r3, r3, #7
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f003 0306 	and.w	r3, r3, #6
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f063 030f 	orn	r3, r3, #15
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	490e      	ldr	r1, [pc, #56]	; (8002f18 <I2C_MasterRequestWrite+0xfc>)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f875 	bl	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e010      	b.n	8002f10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eee:	897b      	ldrh	r3, [r7, #10]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4907      	ldr	r1, [pc, #28]	; (8002f1c <I2C_MasterRequestWrite+0x100>)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f865 	bl	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	00010008 	.word	0x00010008
 8002f1c:	00010002 	.word	0x00010002

08002f20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f30:	e025      	b.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d021      	beq.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3a:	f7fe fc87 	bl	800184c <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d302      	bcc.n	8002f50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d116      	bne.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f043 0220 	orr.w	r2, r3, #32
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e023      	b.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d10d      	bne.n	8002fa4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	e00c      	b.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d0b6      	beq.n	8002f32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fdc:	e051      	b.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fec:	d123      	bne.n	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003006:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f043 0204 	orr.w	r2, r3, #4
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e046      	b.n	80030c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d021      	beq.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303e:	f7fe fc05 	bl	800184c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	429a      	cmp	r2, r3
 800304c:	d302      	bcc.n	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d116      	bne.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f043 0220 	orr.w	r2, r3, #32
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e020      	b.n	80030c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b01      	cmp	r3, #1
 800308a:	d10c      	bne.n	80030a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	43da      	mvns	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4013      	ands	r3, r2
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	bf14      	ite	ne
 800309e:	2301      	movne	r3, #1
 80030a0:	2300      	moveq	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	e00b      	b.n	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	43da      	mvns	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4013      	ands	r3, r2
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d18d      	bne.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d8:	e02d      	b.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f878 	bl	80031d0 <I2C_IsAcknowledgeFailed>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e02d      	b.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d021      	beq.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f2:	f7fe fbab 	bl	800184c <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d302      	bcc.n	8003108 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d116      	bne.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f043 0220 	orr.w	r2, r3, #32
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e007      	b.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b80      	cmp	r3, #128	; 0x80
 8003142:	d1ca      	bne.n	80030da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800315a:	e02d      	b.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f837 	bl	80031d0 <I2C_IsAcknowledgeFailed>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e02d      	b.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d021      	beq.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003174:	f7fe fb6a 	bl	800184c <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	429a      	cmp	r2, r3
 8003182:	d302      	bcc.n	800318a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e007      	b.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d1ca      	bne.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e6:	d11b      	bne.n	8003220 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f043 0204 	orr.w	r2, r3, #4
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0cc      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003244:	4b68      	ldr	r3, [pc, #416]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d90c      	bls.n	800326c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b65      	ldr	r3, [pc, #404]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b63      	ldr	r3, [pc, #396]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0b8      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d020      	beq.n	80032ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003284:	4b59      	ldr	r3, [pc, #356]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4a58      	ldr	r2, [pc, #352]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800328e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800329c:	4b53      	ldr	r3, [pc, #332]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4a52      	ldr	r2, [pc, #328]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a8:	4b50      	ldr	r3, [pc, #320]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	494d      	ldr	r1, [pc, #308]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d044      	beq.n	8003350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d107      	bne.n	80032de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ce:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d119      	bne.n	800330e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e07f      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d003      	beq.n	80032ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ee:	4b3f      	ldr	r3, [pc, #252]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e06f      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fe:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e067      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800330e:	4b37      	ldr	r3, [pc, #220]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 0203 	bic.w	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4934      	ldr	r1, [pc, #208]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	4313      	orrs	r3, r2
 800331e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003320:	f7fe fa94 	bl	800184c <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	e00a      	b.n	800333e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003328:	f7fe fa90 	bl	800184c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e04f      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 020c 	and.w	r2, r3, #12
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	429a      	cmp	r2, r3
 800334e:	d1eb      	bne.n	8003328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003350:	4b25      	ldr	r3, [pc, #148]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d20c      	bcs.n	8003378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e032      	b.n	80033de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4916      	ldr	r1, [pc, #88]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d009      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	490e      	ldr	r1, [pc, #56]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033b6:	f000 f855 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 80033ba:	4602      	mov	r2, r0
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	490a      	ldr	r1, [pc, #40]	; (80033f0 <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	5ccb      	ldrb	r3, [r1, r3]
 80033ca:	fa22 f303 	lsr.w	r3, r2, r3
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_RCC_ClockConfig+0x1c8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe f9f4 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023c00 	.word	0x40023c00
 80033ec:	40023800 	.word	0x40023800
 80033f0:	08006408 	.word	0x08006408
 80033f4:	2000002c 	.word	0x2000002c
 80033f8:	20000030 	.word	0x20000030

080033fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_RCC_GetHCLKFreq+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	2000002c 	.word	0x2000002c

08003414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003418:	f7ff fff0 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	0a9b      	lsrs	r3, r3, #10
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4903      	ldr	r1, [pc, #12]	; (8003438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40023800 	.word	0x40023800
 8003438:	08006418 	.word	0x08006418

0800343c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003440:	f7ff ffdc 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0b5b      	lsrs	r3, r3, #13
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4903      	ldr	r1, [pc, #12]	; (8003460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	08006418 	.word	0x08006418

08003464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003468:	b087      	sub	sp, #28
 800346a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800346c:	2600      	movs	r6, #0
 800346e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8003470:	2600      	movs	r6, #0
 8003472:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8003474:	2600      	movs	r6, #0
 8003476:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8003478:	2600      	movs	r6, #0
 800347a:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800347c:	2600      	movs	r6, #0
 800347e:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003480:	4ea3      	ldr	r6, [pc, #652]	; (8003710 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003482:	68b6      	ldr	r6, [r6, #8]
 8003484:	f006 060c 	and.w	r6, r6, #12
 8003488:	2e0c      	cmp	r6, #12
 800348a:	f200 8137 	bhi.w	80036fc <HAL_RCC_GetSysClockFreq+0x298>
 800348e:	f20f 0c08 	addw	ip, pc, #8
 8003492:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8003496:	bf00      	nop
 8003498:	080034cd 	.word	0x080034cd
 800349c:	080036fd 	.word	0x080036fd
 80034a0:	080036fd 	.word	0x080036fd
 80034a4:	080036fd 	.word	0x080036fd
 80034a8:	080034d3 	.word	0x080034d3
 80034ac:	080036fd 	.word	0x080036fd
 80034b0:	080036fd 	.word	0x080036fd
 80034b4:	080036fd 	.word	0x080036fd
 80034b8:	080034d9 	.word	0x080034d9
 80034bc:	080036fd 	.word	0x080036fd
 80034c0:	080036fd 	.word	0x080036fd
 80034c4:	080036fd 	.word	0x080036fd
 80034c8:	080035ef 	.word	0x080035ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034cc:	4b91      	ldr	r3, [pc, #580]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80034ce:	613b      	str	r3, [r7, #16]
       break;
 80034d0:	e117      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034d2:	4b91      	ldr	r3, [pc, #580]	; (8003718 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80034d4:	613b      	str	r3, [r7, #16]
      break;
 80034d6:	e114      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034d8:	4b8d      	ldr	r3, [pc, #564]	; (8003710 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034e2:	4b8b      	ldr	r3, [pc, #556]	; (8003710 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d024      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ee:	4b88      	ldr	r3, [pc, #544]	; (8003710 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	099b      	lsrs	r3, r3, #6
 80034f4:	461a      	mov	r2, r3
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	f240 14ff 	movw	r4, #511	; 0x1ff
 80034fe:	f04f 0500 	mov.w	r5, #0
 8003502:	ea02 0004 	and.w	r0, r2, r4
 8003506:	ea03 0105 	and.w	r1, r3, r5
 800350a:	4b83      	ldr	r3, [pc, #524]	; (8003718 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800350c:	fb03 f201 	mul.w	r2, r3, r1
 8003510:	2300      	movs	r3, #0
 8003512:	fb03 f300 	mul.w	r3, r3, r0
 8003516:	4413      	add	r3, r2
 8003518:	4a7f      	ldr	r2, [pc, #508]	; (8003718 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800351a:	fba0 0102 	umull	r0, r1, r0, r2
 800351e:	440b      	add	r3, r1
 8003520:	4619      	mov	r1, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	461a      	mov	r2, r3
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	f7fc fec9 	bl	80002c0 <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4613      	mov	r3, r2
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	e04c      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003538:	4b75      	ldr	r3, [pc, #468]	; (8003710 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	099b      	lsrs	r3, r3, #6
 800353e:	461a      	mov	r2, r3
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003548:	f04f 0100 	mov.w	r1, #0
 800354c:	ea02 0800 	and.w	r8, r2, r0
 8003550:	ea03 0901 	and.w	r9, r3, r1
 8003554:	4640      	mov	r0, r8
 8003556:	4649      	mov	r1, r9
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	014b      	lsls	r3, r1, #5
 8003562:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003566:	0142      	lsls	r2, r0, #5
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	ebb0 0008 	subs.w	r0, r0, r8
 8003570:	eb61 0109 	sbc.w	r1, r1, r9
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	018b      	lsls	r3, r1, #6
 800357e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003582:	0182      	lsls	r2, r0, #6
 8003584:	1a12      	subs	r2, r2, r0
 8003586:	eb63 0301 	sbc.w	r3, r3, r1
 800358a:	f04f 0000 	mov.w	r0, #0
 800358e:	f04f 0100 	mov.w	r1, #0
 8003592:	00d9      	lsls	r1, r3, #3
 8003594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003598:	00d0      	lsls	r0, r2, #3
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	eb12 0208 	adds.w	r2, r2, r8
 80035a2:	eb43 0309 	adc.w	r3, r3, r9
 80035a6:	f04f 0000 	mov.w	r0, #0
 80035aa:	f04f 0100 	mov.w	r1, #0
 80035ae:	0299      	lsls	r1, r3, #10
 80035b0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035b4:	0290      	lsls	r0, r2, #10
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	461a      	mov	r2, r3
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	f7fc fe7b 	bl	80002c0 <__aeabi_uldivmod>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4613      	mov	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035d2:	4b4f      	ldr	r3, [pc, #316]	; (8003710 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	0c1b      	lsrs	r3, r3, #16
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	3301      	adds	r3, #1
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ea:	613b      	str	r3, [r7, #16]
      break;
 80035ec:	e089      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035ee:	4948      	ldr	r1, [pc, #288]	; (8003710 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80035f0:	6849      	ldr	r1, [r1, #4]
 80035f2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80035f6:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035f8:	4945      	ldr	r1, [pc, #276]	; (8003710 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80035fa:	6849      	ldr	r1, [r1, #4]
 80035fc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003600:	2900      	cmp	r1, #0
 8003602:	d024      	beq.n	800364e <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003604:	4942      	ldr	r1, [pc, #264]	; (8003710 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003606:	6849      	ldr	r1, [r1, #4]
 8003608:	0989      	lsrs	r1, r1, #6
 800360a:	4608      	mov	r0, r1
 800360c:	f04f 0100 	mov.w	r1, #0
 8003610:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003614:	f04f 0500 	mov.w	r5, #0
 8003618:	ea00 0204 	and.w	r2, r0, r4
 800361c:	ea01 0305 	and.w	r3, r1, r5
 8003620:	493d      	ldr	r1, [pc, #244]	; (8003718 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003622:	fb01 f003 	mul.w	r0, r1, r3
 8003626:	2100      	movs	r1, #0
 8003628:	fb01 f102 	mul.w	r1, r1, r2
 800362c:	1844      	adds	r4, r0, r1
 800362e:	493a      	ldr	r1, [pc, #232]	; (8003718 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003630:	fba2 0101 	umull	r0, r1, r2, r1
 8003634:	1863      	adds	r3, r4, r1
 8003636:	4619      	mov	r1, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	461a      	mov	r2, r3
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	f7fc fe3e 	bl	80002c0 <__aeabi_uldivmod>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4613      	mov	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e04a      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364e:	4b30      	ldr	r3, [pc, #192]	; (8003710 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	099b      	lsrs	r3, r3, #6
 8003654:	461a      	mov	r2, r3
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800365e:	f04f 0100 	mov.w	r1, #0
 8003662:	ea02 0400 	and.w	r4, r2, r0
 8003666:	ea03 0501 	and.w	r5, r3, r1
 800366a:	4620      	mov	r0, r4
 800366c:	4629      	mov	r1, r5
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	014b      	lsls	r3, r1, #5
 8003678:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800367c:	0142      	lsls	r2, r0, #5
 800367e:	4610      	mov	r0, r2
 8003680:	4619      	mov	r1, r3
 8003682:	1b00      	subs	r0, r0, r4
 8003684:	eb61 0105 	sbc.w	r1, r1, r5
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	018b      	lsls	r3, r1, #6
 8003692:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003696:	0182      	lsls	r2, r0, #6
 8003698:	1a12      	subs	r2, r2, r0
 800369a:	eb63 0301 	sbc.w	r3, r3, r1
 800369e:	f04f 0000 	mov.w	r0, #0
 80036a2:	f04f 0100 	mov.w	r1, #0
 80036a6:	00d9      	lsls	r1, r3, #3
 80036a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036ac:	00d0      	lsls	r0, r2, #3
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	1912      	adds	r2, r2, r4
 80036b4:	eb45 0303 	adc.w	r3, r5, r3
 80036b8:	f04f 0000 	mov.w	r0, #0
 80036bc:	f04f 0100 	mov.w	r1, #0
 80036c0:	0299      	lsls	r1, r3, #10
 80036c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036c6:	0290      	lsls	r0, r2, #10
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	461a      	mov	r2, r3
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	f7fc fdf2 	bl	80002c0 <__aeabi_uldivmod>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4613      	mov	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036e4:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	0f1b      	lsrs	r3, r3, #28
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	613b      	str	r3, [r7, #16]
      break;
 80036fa:	e002      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80036fe:	613b      	str	r3, [r7, #16]
      break;
 8003700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003702:	693b      	ldr	r3, [r7, #16]
}
 8003704:	4618      	mov	r0, r3
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	00f42400 	.word	0x00f42400
 8003718:	017d7840 	.word	0x017d7840

0800371c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e28d      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8083 	beq.w	8003842 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800373c:	4b94      	ldr	r3, [pc, #592]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b04      	cmp	r3, #4
 8003746:	d019      	beq.n	800377c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003748:	4b91      	ldr	r3, [pc, #580]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003750:	2b08      	cmp	r3, #8
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003754:	4b8e      	ldr	r3, [pc, #568]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003760:	d00c      	beq.n	800377c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003762:	4b8b      	ldr	r3, [pc, #556]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800376a:	2b0c      	cmp	r3, #12
 800376c:	d112      	bne.n	8003794 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376e:	4b88      	ldr	r3, [pc, #544]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800377a:	d10b      	bne.n	8003794 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377c:	4b84      	ldr	r3, [pc, #528]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d05b      	beq.n	8003840 <HAL_RCC_OscConfig+0x124>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d157      	bne.n	8003840 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e25a      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379c:	d106      	bne.n	80037ac <HAL_RCC_OscConfig+0x90>
 800379e:	4b7c      	ldr	r3, [pc, #496]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a7b      	ldr	r2, [pc, #492]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e01d      	b.n	80037e8 <HAL_RCC_OscConfig+0xcc>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCC_OscConfig+0xb4>
 80037b6:	4b76      	ldr	r3, [pc, #472]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a75      	ldr	r2, [pc, #468]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80037bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	4b73      	ldr	r3, [pc, #460]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a72      	ldr	r2, [pc, #456]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e00b      	b.n	80037e8 <HAL_RCC_OscConfig+0xcc>
 80037d0:	4b6f      	ldr	r3, [pc, #444]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a6e      	ldr	r2, [pc, #440]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80037d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4b6c      	ldr	r3, [pc, #432]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a6b      	ldr	r2, [pc, #428]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80037e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d013      	beq.n	8003818 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fe f82c 	bl	800184c <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f8:	f7fe f828 	bl	800184c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e21f      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	4b61      	ldr	r3, [pc, #388]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0xdc>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fe f818 	bl	800184c <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003820:	f7fe f814 	bl	800184c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e20b      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003832:	4b57      	ldr	r3, [pc, #348]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x104>
 800383e:	e000      	b.n	8003842 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d06f      	beq.n	800392e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800384e:	4b50      	ldr	r3, [pc, #320]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b00      	cmp	r3, #0
 8003858:	d017      	beq.n	800388a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800385a:	4b4d      	ldr	r3, [pc, #308]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003862:	2b08      	cmp	r3, #8
 8003864:	d105      	bne.n	8003872 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003866:	4b4a      	ldr	r3, [pc, #296]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003872:	4b47      	ldr	r3, [pc, #284]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800387a:	2b0c      	cmp	r3, #12
 800387c:	d11c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800387e:	4b44      	ldr	r3, [pc, #272]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d116      	bne.n	80038b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388a:	4b41      	ldr	r3, [pc, #260]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_RCC_OscConfig+0x186>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e1d3      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a2:	4b3b      	ldr	r3, [pc, #236]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4937      	ldr	r1, [pc, #220]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b6:	e03a      	b.n	800392e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d020      	beq.n	8003902 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038c0:	4b34      	ldr	r3, [pc, #208]	; (8003994 <HAL_RCC_OscConfig+0x278>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c6:	f7fd ffc1 	bl	800184c <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ce:	f7fd ffbd 	bl	800184c <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e1b4      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e0:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ec:	4b28      	ldr	r3, [pc, #160]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4925      	ldr	r1, [pc, #148]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	600b      	str	r3, [r1, #0]
 8003900:	e015      	b.n	800392e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003902:	4b24      	ldr	r3, [pc, #144]	; (8003994 <HAL_RCC_OscConfig+0x278>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fd ffa0 	bl	800184c <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003910:	f7fd ff9c 	bl	800184c <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e193      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003922:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d036      	beq.n	80039a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d016      	beq.n	8003970 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003942:	4b15      	ldr	r3, [pc, #84]	; (8003998 <HAL_RCC_OscConfig+0x27c>)
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7fd ff80 	bl	800184c <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003950:	f7fd ff7c 	bl	800184c <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e173      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_OscConfig+0x274>)
 8003964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f0      	beq.n	8003950 <HAL_RCC_OscConfig+0x234>
 800396e:	e01b      	b.n	80039a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_RCC_OscConfig+0x27c>)
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003976:	f7fd ff69 	bl	800184c <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800397c:	e00e      	b.n	800399c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800397e:	f7fd ff65 	bl	800184c <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d907      	bls.n	800399c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e15c      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
 8003990:	40023800 	.word	0x40023800
 8003994:	42470000 	.word	0x42470000
 8003998:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399c:	4b8a      	ldr	r3, [pc, #552]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 800399e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1ea      	bne.n	800397e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8097 	beq.w	8003ae4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ba:	4b83      	ldr	r3, [pc, #524]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10f      	bne.n	80039e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	4b7f      	ldr	r3, [pc, #508]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	4a7e      	ldr	r2, [pc, #504]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 80039d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d4:	6413      	str	r3, [r2, #64]	; 0x40
 80039d6:	4b7c      	ldr	r3, [pc, #496]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e2:	2301      	movs	r3, #1
 80039e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e6:	4b79      	ldr	r3, [pc, #484]	; (8003bcc <HAL_RCC_OscConfig+0x4b0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d118      	bne.n	8003a24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039f2:	4b76      	ldr	r3, [pc, #472]	; (8003bcc <HAL_RCC_OscConfig+0x4b0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a75      	ldr	r2, [pc, #468]	; (8003bcc <HAL_RCC_OscConfig+0x4b0>)
 80039f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fe:	f7fd ff25 	bl	800184c <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a06:	f7fd ff21 	bl	800184c <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e118      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	4b6c      	ldr	r3, [pc, #432]	; (8003bcc <HAL_RCC_OscConfig+0x4b0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d106      	bne.n	8003a3a <HAL_RCC_OscConfig+0x31e>
 8003a2c:	4b66      	ldr	r3, [pc, #408]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	4a65      	ldr	r2, [pc, #404]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70
 8003a38:	e01c      	b.n	8003a74 <HAL_RCC_OscConfig+0x358>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	d10c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x340>
 8003a42:	4b61      	ldr	r3, [pc, #388]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	4a60      	ldr	r2, [pc, #384]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a48:	f043 0304 	orr.w	r3, r3, #4
 8003a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4e:	4b5e      	ldr	r3, [pc, #376]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	4a5d      	ldr	r2, [pc, #372]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5a:	e00b      	b.n	8003a74 <HAL_RCC_OscConfig+0x358>
 8003a5c:	4b5a      	ldr	r3, [pc, #360]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	4a59      	ldr	r2, [pc, #356]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	6713      	str	r3, [r2, #112]	; 0x70
 8003a68:	4b57      	ldr	r3, [pc, #348]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	4a56      	ldr	r2, [pc, #344]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a6e:	f023 0304 	bic.w	r3, r3, #4
 8003a72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d015      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7c:	f7fd fee6 	bl	800184c <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a84:	f7fd fee2 	bl	800184c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e0d7      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9a:	4b4b      	ldr	r3, [pc, #300]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0ee      	beq.n	8003a84 <HAL_RCC_OscConfig+0x368>
 8003aa6:	e014      	b.n	8003ad2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa8:	f7fd fed0 	bl	800184c <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab0:	f7fd fecc 	bl	800184c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e0c1      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac6:	4b40      	ldr	r3, [pc, #256]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1ee      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d105      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad8:	4b3b      	ldr	r3, [pc, #236]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	4a3a      	ldr	r2, [pc, #232]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80ad 	beq.w	8003c48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aee:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d060      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d145      	bne.n	8003b8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b02:	4b33      	ldr	r3, [pc, #204]	; (8003bd0 <HAL_RCC_OscConfig+0x4b4>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fd fea0 	bl	800184c <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fd fe9c 	bl	800184c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e093      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69da      	ldr	r2, [r3, #28]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	019b      	lsls	r3, r3, #6
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	3b01      	subs	r3, #1
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	061b      	lsls	r3, r3, #24
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	071b      	lsls	r3, r3, #28
 8003b5a:	491b      	ldr	r1, [pc, #108]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b60:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCC_OscConfig+0x4b4>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b66:	f7fd fe71 	bl	800184c <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fd fe6d 	bl	800184c <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e064      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x452>
 8003b8c:	e05c      	b.n	8003c48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8e:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <HAL_RCC_OscConfig+0x4b4>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fd fe5a 	bl	800184c <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fd fe56 	bl	800184c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e04d      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_RCC_OscConfig+0x4ac>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x480>
 8003bba:	e045      	b.n	8003c48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e040      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bd4:	4b1f      	ldr	r3, [pc, #124]	; (8003c54 <HAL_RCC_OscConfig+0x538>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d030      	beq.n	8003c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d129      	bne.n	8003c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d122      	bne.n	8003c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c04:	4013      	ands	r3, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d119      	bne.n	8003c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d10f      	bne.n	8003c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800

08003c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e041      	b.n	8003cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fd fc14 	bl	80014ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3304      	adds	r3, #4
 8003c94:	4619      	mov	r1, r3
 8003c96:	4610      	mov	r0, r2
 8003c98:	f000 fc0a 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e041      	b.n	8003d8c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f839 	bl	8003d94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f000 fbbb 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_TIM_PWM_Start+0x24>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e022      	b.n	8003e12 <HAL_TIM_PWM_Start+0x6a>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d109      	bne.n	8003de6 <HAL_TIM_PWM_Start+0x3e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	bf14      	ite	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	2300      	moveq	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e015      	b.n	8003e12 <HAL_TIM_PWM_Start+0x6a>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d109      	bne.n	8003e00 <HAL_TIM_PWM_Start+0x58>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e008      	b.n	8003e12 <HAL_TIM_PWM_Start+0x6a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	bf14      	ite	ne
 8003e0c:	2301      	movne	r3, #1
 8003e0e:	2300      	moveq	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e07c      	b.n	8003f14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <HAL_TIM_PWM_Start+0x82>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e28:	e013      	b.n	8003e52 <HAL_TIM_PWM_Start+0xaa>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d104      	bne.n	8003e3a <HAL_TIM_PWM_Start+0x92>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e38:	e00b      	b.n	8003e52 <HAL_TIM_PWM_Start+0xaa>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_PWM_Start+0xa2>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e48:	e003      	b.n	8003e52 <HAL_TIM_PWM_Start+0xaa>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2201      	movs	r2, #1
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fe12 	bl	8004a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a2d      	ldr	r2, [pc, #180]	; (8003f1c <HAL_TIM_PWM_Start+0x174>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <HAL_TIM_PWM_Start+0xcc>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a2c      	ldr	r2, [pc, #176]	; (8003f20 <HAL_TIM_PWM_Start+0x178>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d101      	bne.n	8003e78 <HAL_TIM_PWM_Start+0xd0>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <HAL_TIM_PWM_Start+0xd2>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <HAL_TIM_PWM_Start+0x174>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d022      	beq.n	8003ede <HAL_TIM_PWM_Start+0x136>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea0:	d01d      	beq.n	8003ede <HAL_TIM_PWM_Start+0x136>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1f      	ldr	r2, [pc, #124]	; (8003f24 <HAL_TIM_PWM_Start+0x17c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d018      	beq.n	8003ede <HAL_TIM_PWM_Start+0x136>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1d      	ldr	r2, [pc, #116]	; (8003f28 <HAL_TIM_PWM_Start+0x180>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_TIM_PWM_Start+0x136>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1c      	ldr	r2, [pc, #112]	; (8003f2c <HAL_TIM_PWM_Start+0x184>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_TIM_PWM_Start+0x136>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a16      	ldr	r2, [pc, #88]	; (8003f20 <HAL_TIM_PWM_Start+0x178>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_TIM_PWM_Start+0x136>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_TIM_PWM_Start+0x188>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_TIM_PWM_Start+0x136>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a16      	ldr	r2, [pc, #88]	; (8003f34 <HAL_TIM_PWM_Start+0x18c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d111      	bne.n	8003f02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b06      	cmp	r3, #6
 8003eee:	d010      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f00:	e007      	b.n	8003f12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40010400 	.word	0x40010400
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40014000 	.word	0x40014000
 8003f34:	40001800 	.word	0x40001800

08003f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d122      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d11b      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0202 	mvn.w	r2, #2
 8003f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fa7a 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fa6c 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fa7d 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d122      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d11b      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0204 	mvn.w	r2, #4
 8003fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa50 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e005      	b.n	8003fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fa42 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fa53 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d122      	bne.n	800403c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b08      	cmp	r3, #8
 8004002:	d11b      	bne.n	800403c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0208 	mvn.w	r2, #8
 800400c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2204      	movs	r2, #4
 8004012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fa26 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004028:	e005      	b.n	8004036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fa18 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fa29 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	2b10      	cmp	r3, #16
 8004048:	d122      	bne.n	8004090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b10      	cmp	r3, #16
 8004056:	d11b      	bne.n	8004090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0210 	mvn.w	r2, #16
 8004060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2208      	movs	r2, #8
 8004066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f9fc 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 800407c:	e005      	b.n	800408a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f9ee 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f9ff 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b01      	cmp	r3, #1
 800409c:	d10e      	bne.n	80040bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d107      	bne.n	80040bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0201 	mvn.w	r2, #1
 80040b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f9c8 	bl	800444c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c6:	2b80      	cmp	r3, #128	; 0x80
 80040c8:	d10e      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	2b80      	cmp	r3, #128	; 0x80
 80040d6:	d107      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fd7a 	bl	8004bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b40      	cmp	r3, #64	; 0x40
 80040f4:	d10e      	bne.n	8004114 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004100:	2b40      	cmp	r3, #64	; 0x40
 8004102:	d107      	bne.n	8004114 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f9c4 	bl	800449c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b20      	cmp	r3, #32
 8004120:	d10e      	bne.n	8004140 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b20      	cmp	r3, #32
 800412e:	d107      	bne.n	8004140 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0220 	mvn.w	r2, #32
 8004138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fd44 	bl	8004bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800415e:	2302      	movs	r3, #2
 8004160:	e0ac      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b0c      	cmp	r3, #12
 800416e:	f200 809f 	bhi.w	80042b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004172:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	080041ad 	.word	0x080041ad
 800417c:	080042b1 	.word	0x080042b1
 8004180:	080042b1 	.word	0x080042b1
 8004184:	080042b1 	.word	0x080042b1
 8004188:	080041ed 	.word	0x080041ed
 800418c:	080042b1 	.word	0x080042b1
 8004190:	080042b1 	.word	0x080042b1
 8004194:	080042b1 	.word	0x080042b1
 8004198:	0800422f 	.word	0x0800422f
 800419c:	080042b1 	.word	0x080042b1
 80041a0:	080042b1 	.word	0x080042b1
 80041a4:	080042b1 	.word	0x080042b1
 80041a8:	0800426f 	.word	0x0800426f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fa1c 	bl	80045f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0208 	orr.w	r2, r2, #8
 80041c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0204 	bic.w	r2, r2, #4
 80041d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6999      	ldr	r1, [r3, #24]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	619a      	str	r2, [r3, #24]
      break;
 80041ea:	e062      	b.n	80042b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fa6c 	bl	80046d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6999      	ldr	r1, [r3, #24]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	021a      	lsls	r2, r3, #8
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	619a      	str	r2, [r3, #24]
      break;
 800422c:	e041      	b.n	80042b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fac1 	bl	80047bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0208 	orr.w	r2, r2, #8
 8004248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0204 	bic.w	r2, r2, #4
 8004258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69d9      	ldr	r1, [r3, #28]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	61da      	str	r2, [r3, #28]
      break;
 800426c:	e021      	b.n	80042b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fb15 	bl	80048a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69d9      	ldr	r1, [r3, #28]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	021a      	lsls	r2, r3, #8
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	61da      	str	r2, [r3, #28]
      break;
 80042ae:	e000      	b.n	80042b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80042b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_TIM_ConfigClockSource+0x18>
 80042d8:	2302      	movs	r3, #2
 80042da:	e0b3      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x180>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004302:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004314:	d03e      	beq.n	8004394 <HAL_TIM_ConfigClockSource+0xd0>
 8004316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431a:	f200 8087 	bhi.w	800442c <HAL_TIM_ConfigClockSource+0x168>
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004322:	f000 8085 	beq.w	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432a:	d87f      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x168>
 800432c:	2b70      	cmp	r3, #112	; 0x70
 800432e:	d01a      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0xa2>
 8004330:	2b70      	cmp	r3, #112	; 0x70
 8004332:	d87b      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x168>
 8004334:	2b60      	cmp	r3, #96	; 0x60
 8004336:	d050      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x116>
 8004338:	2b60      	cmp	r3, #96	; 0x60
 800433a:	d877      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x168>
 800433c:	2b50      	cmp	r3, #80	; 0x50
 800433e:	d03c      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0xf6>
 8004340:	2b50      	cmp	r3, #80	; 0x50
 8004342:	d873      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x168>
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d058      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x136>
 8004348:	2b40      	cmp	r3, #64	; 0x40
 800434a:	d86f      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x168>
 800434c:	2b30      	cmp	r3, #48	; 0x30
 800434e:	d064      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x156>
 8004350:	2b30      	cmp	r3, #48	; 0x30
 8004352:	d86b      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x168>
 8004354:	2b20      	cmp	r3, #32
 8004356:	d060      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x156>
 8004358:	2b20      	cmp	r3, #32
 800435a:	d867      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x168>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d05c      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x156>
 8004360:	2b10      	cmp	r3, #16
 8004362:	d05a      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004364:	e062      	b.n	800442c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6899      	ldr	r1, [r3, #8]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f000 fb65 	bl	8004a44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004388:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	609a      	str	r2, [r3, #8]
      break;
 8004392:	e04e      	b.n	8004432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6899      	ldr	r1, [r3, #8]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f000 fb4e 	bl	8004a44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043b6:	609a      	str	r2, [r3, #8]
      break;
 80043b8:	e03b      	b.n	8004432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6859      	ldr	r1, [r3, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	461a      	mov	r2, r3
 80043c8:	f000 fac2 	bl	8004950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2150      	movs	r1, #80	; 0x50
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fb1b 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 80043d8:	e02b      	b.n	8004432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6859      	ldr	r1, [r3, #4]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f000 fae1 	bl	80049ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2160      	movs	r1, #96	; 0x60
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fb0b 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 80043f8:	e01b      	b.n	8004432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	461a      	mov	r2, r3
 8004408:	f000 faa2 	bl	8004950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2140      	movs	r1, #64	; 0x40
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fafb 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 8004418:	e00b      	b.n	8004432 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f000 faf2 	bl	8004a0e <TIM_ITRx_SetConfig>
        break;
 800442a:	e002      	b.n	8004432 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800442c:	bf00      	nop
 800442e:	e000      	b.n	8004432 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004430:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ce:	d00f      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3d      	ldr	r2, [pc, #244]	; (80045c8 <TIM_Base_SetConfig+0x118>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00b      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3c      	ldr	r2, [pc, #240]	; (80045cc <TIM_Base_SetConfig+0x11c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3b      	ldr	r2, [pc, #236]	; (80045d0 <TIM_Base_SetConfig+0x120>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a3a      	ldr	r2, [pc, #232]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2f      	ldr	r2, [pc, #188]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d02b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004510:	d027      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <TIM_Base_SetConfig+0x118>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d023      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <TIM_Base_SetConfig+0x11c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <TIM_Base_SetConfig+0x120>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a29      	ldr	r2, [pc, #164]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d017      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a28      	ldr	r2, [pc, #160]	; (80045d8 <TIM_Base_SetConfig+0x128>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a27      	ldr	r2, [pc, #156]	; (80045dc <TIM_Base_SetConfig+0x12c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <TIM_Base_SetConfig+0x130>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <TIM_Base_SetConfig+0x134>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a24      	ldr	r2, [pc, #144]	; (80045e8 <TIM_Base_SetConfig+0x138>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d003      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a23      	ldr	r2, [pc, #140]	; (80045ec <TIM_Base_SetConfig+0x13c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d108      	bne.n	8004574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_Base_SetConfig+0xf8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d103      	bne.n	80045b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	615a      	str	r2, [r3, #20]
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40010400 	.word	0x40010400
 80045d8:	40014000 	.word	0x40014000
 80045dc:	40014400 	.word	0x40014400
 80045e0:	40014800 	.word	0x40014800
 80045e4:	40001800 	.word	0x40001800
 80045e8:	40001c00 	.word	0x40001c00
 80045ec:	40002000 	.word	0x40002000

080045f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 0201 	bic.w	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0303 	bic.w	r3, r3, #3
 8004626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f023 0302 	bic.w	r3, r3, #2
 8004638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4313      	orrs	r3, r2
 8004642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a20      	ldr	r2, [pc, #128]	; (80046c8 <TIM_OC1_SetConfig+0xd8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d003      	beq.n	8004654 <TIM_OC1_SetConfig+0x64>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <TIM_OC1_SetConfig+0xdc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d10c      	bne.n	800466e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0308 	bic.w	r3, r3, #8
 800465a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f023 0304 	bic.w	r3, r3, #4
 800466c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <TIM_OC1_SetConfig+0xd8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <TIM_OC1_SetConfig+0x8e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a14      	ldr	r2, [pc, #80]	; (80046cc <TIM_OC1_SetConfig+0xdc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d111      	bne.n	80046a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800468c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	621a      	str	r2, [r3, #32]
}
 80046bc:	bf00      	nop
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40010000 	.word	0x40010000
 80046cc:	40010400 	.word	0x40010400

080046d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f023 0210 	bic.w	r2, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f023 0320 	bic.w	r3, r3, #32
 800471a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a22      	ldr	r2, [pc, #136]	; (80047b4 <TIM_OC2_SetConfig+0xe4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_OC2_SetConfig+0x68>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a21      	ldr	r2, [pc, #132]	; (80047b8 <TIM_OC2_SetConfig+0xe8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d10d      	bne.n	8004754 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800473e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <TIM_OC2_SetConfig+0xe4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_OC2_SetConfig+0x94>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <TIM_OC2_SetConfig+0xe8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d113      	bne.n	800478c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800476a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40010400 	.word	0x40010400

080047bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	021b      	lsls	r3, r3, #8
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a21      	ldr	r2, [pc, #132]	; (800489c <TIM_OC3_SetConfig+0xe0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <TIM_OC3_SetConfig+0x66>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a20      	ldr	r2, [pc, #128]	; (80048a0 <TIM_OC3_SetConfig+0xe4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d10d      	bne.n	800483e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800483c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a16      	ldr	r2, [pc, #88]	; (800489c <TIM_OC3_SetConfig+0xe0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d003      	beq.n	800484e <TIM_OC3_SetConfig+0x92>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <TIM_OC3_SetConfig+0xe4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d113      	bne.n	8004876 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800485c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	621a      	str	r2, [r3, #32]
}
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40010000 	.word	0x40010000
 80048a0:	40010400 	.word	0x40010400

080048a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	031b      	lsls	r3, r3, #12
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a12      	ldr	r2, [pc, #72]	; (8004948 <TIM_OC4_SetConfig+0xa4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_OC4_SetConfig+0x68>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a11      	ldr	r2, [pc, #68]	; (800494c <TIM_OC4_SetConfig+0xa8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d109      	bne.n	8004920 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	019b      	lsls	r3, r3, #6
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	621a      	str	r2, [r3, #32]
}
 800493a:	bf00      	nop
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40010000 	.word	0x40010000
 800494c:	40010400 	.word	0x40010400

08004950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f023 0201 	bic.w	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800497a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 030a 	bic.w	r3, r3, #10
 800498c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b087      	sub	sp, #28
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	f023 0210 	bic.w	r2, r3, #16
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	031b      	lsls	r3, r3, #12
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f043 0307 	orr.w	r3, r3, #7
 8004a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	609a      	str	r2, [r3, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	021a      	lsls	r2, r3, #8
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	609a      	str	r2, [r3, #8]
}
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2201      	movs	r2, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1a      	ldr	r2, [r3, #32]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e05a      	b.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a21      	ldr	r2, [pc, #132]	; (8004bac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d022      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b34:	d01d      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1d      	ldr	r2, [pc, #116]	; (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d018      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1b      	ldr	r2, [pc, #108]	; (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d013      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1a      	ldr	r2, [pc, #104]	; (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00e      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d009      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a17      	ldr	r2, [pc, #92]	; (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d004      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d10c      	bne.n	8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800
 8004bb8:	40000c00 	.word	0x40000c00
 8004bbc:	40010400 	.word	0x40010400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40001800 	.word	0x40001800

08004bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e03f      	b.n	8004c82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fc fcaa 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2224      	movs	r2, #36	; 0x24
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fc7b 	bl	8005530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b08a      	sub	sp, #40	; 0x28
 8004c8e:	af02      	add	r7, sp, #8
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	603b      	str	r3, [r7, #0]
 8004c96:	4613      	mov	r3, r2
 8004c98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d17c      	bne.n	8004da4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_UART_Transmit+0x2c>
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e075      	b.n	8004da6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_UART_Transmit+0x3e>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e06e      	b.n	8004da6 <HAL_UART_Transmit+0x11c>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2221      	movs	r2, #33	; 0x21
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cde:	f7fc fdb5 	bl	800184c <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf8:	d108      	bne.n	8004d0c <HAL_UART_Transmit+0x82>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d104      	bne.n	8004d0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	e003      	b.n	8004d14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d1c:	e02a      	b.n	8004d74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2200      	movs	r2, #0
 8004d26:	2180      	movs	r1, #128	; 0x80
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 fa3d 	bl	80051a8 <UART_WaitOnFlagUntilTimeout>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e036      	b.n	8004da6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10b      	bne.n	8004d56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	3302      	adds	r3, #2
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	e007      	b.n	8004d66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	781a      	ldrb	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	3301      	adds	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1cf      	bne.n	8004d1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2200      	movs	r2, #0
 8004d86:	2140      	movs	r1, #64	; 0x40
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fa0d 	bl	80051a8 <UART_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e006      	b.n	8004da6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e000      	b.n	8004da6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
  }
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	4613      	mov	r3, r2
 8004dba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d11d      	bne.n	8004e04 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_UART_Receive_IT+0x26>
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e016      	b.n	8004e06 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d101      	bne.n	8004de6 <HAL_UART_Receive_IT+0x38>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e00f      	b.n	8004e06 <HAL_UART_Receive_IT+0x58>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004df4:	88fb      	ldrh	r3, [r7, #6]
 8004df6:	461a      	mov	r2, r3
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 fa1e 	bl	800523c <UART_Start_Receive_IT>
 8004e00:	4603      	mov	r3, r0
 8004e02:	e000      	b.n	8004e06 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e04:	2302      	movs	r3, #2
  }
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08a      	sub	sp, #40	; 0x28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10d      	bne.n	8004e62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_UART_IRQHandler+0x52>
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fad1 	bl	8005402 <UART_Receive_IT>
      return;
 8004e60:	e17c      	b.n	800515c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80b1 	beq.w	8004fcc <HAL_UART_IRQHandler+0x1bc>
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <HAL_UART_IRQHandler+0x70>
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 80a6 	beq.w	8004fcc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x90>
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	f043 0201 	orr.w	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_UART_IRQHandler+0xb0>
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	f043 0202 	orr.w	r2, r3, #2
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <HAL_UART_IRQHandler+0xd0>
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f043 0204 	orr.w	r2, r3, #4
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00f      	beq.n	8004f0a <HAL_UART_IRQHandler+0xfa>
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d104      	bne.n	8004efe <HAL_UART_IRQHandler+0xee>
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d005      	beq.n	8004f0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f043 0208 	orr.w	r2, r3, #8
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 811f 	beq.w	8005152 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <HAL_UART_IRQHandler+0x11e>
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fa6a 	bl	8005402 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2301      	moveq	r3, #1
 8004f3e:	2300      	movne	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d102      	bne.n	8004f56 <HAL_UART_IRQHandler+0x146>
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d031      	beq.n	8004fba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f9aa 	bl	80052b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f66:	2b40      	cmp	r3, #64	; 0x40
 8004f68:	d123      	bne.n	8004fb2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695a      	ldr	r2, [r3, #20]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f78:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d013      	beq.n	8004faa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	4a77      	ldr	r2, [pc, #476]	; (8005164 <HAL_UART_IRQHandler+0x354>)
 8004f88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fd fa1d 	bl	80023ce <HAL_DMA_Abort_IT>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d016      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa8:	e00e      	b.n	8004fc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8e6 	bl	800517c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	e00a      	b.n	8004fc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f8e2 	bl	800517c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	e006      	b.n	8004fc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f8de 	bl	800517c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004fc6:	e0c4      	b.n	8005152 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc8:	bf00      	nop
    return;
 8004fca:	e0c2      	b.n	8005152 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	f040 80a2 	bne.w	800511a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 809c 	beq.w	800511a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8096 	beq.w	800511a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d14f      	bne.n	80050b2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800501c:	8a3b      	ldrh	r3, [r7, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 8099 	beq.w	8005156 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005028:	8a3a      	ldrh	r2, [r7, #16]
 800502a:	429a      	cmp	r2, r3
 800502c:	f080 8093 	bcs.w	8005156 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8a3a      	ldrh	r2, [r7, #16]
 8005034:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005040:	d02b      	beq.n	800509a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005050:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695a      	ldr	r2, [r3, #20]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005070:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0210 	bic.w	r2, r2, #16
 800508e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	4618      	mov	r0, r3
 8005096:	f7fd f92a 	bl	80022ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	4619      	mov	r1, r3
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f870 	bl	8005190 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80050b0:	e051      	b.n	8005156 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d047      	beq.n	800515a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80050ca:	8a7b      	ldrh	r3, [r7, #18]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d044      	beq.n	800515a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050de:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695a      	ldr	r2, [r3, #20]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0201 	bic.w	r2, r2, #1
 80050ee:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0210 	bic.w	r2, r2, #16
 800510c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800510e:	8a7b      	ldrh	r3, [r7, #18]
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f83c 	bl	8005190 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005118:	e01f      	b.n	800515a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005120:	2b00      	cmp	r3, #0
 8005122:	d008      	beq.n	8005136 <HAL_UART_IRQHandler+0x326>
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f8ff 	bl	8005332 <UART_Transmit_IT>
    return;
 8005134:	e012      	b.n	800515c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00d      	beq.n	800515c <HAL_UART_IRQHandler+0x34c>
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d008      	beq.n	800515c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f941 	bl	80053d2 <UART_EndTransmit_IT>
    return;
 8005150:	e004      	b.n	800515c <HAL_UART_IRQHandler+0x34c>
    return;
 8005152:	bf00      	nop
 8005154:	e002      	b.n	800515c <HAL_UART_IRQHandler+0x34c>
      return;
 8005156:	bf00      	nop
 8005158:	e000      	b.n	800515c <HAL_UART_IRQHandler+0x34c>
      return;
 800515a:	bf00      	nop
  }
}
 800515c:	3728      	adds	r7, #40	; 0x28
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	0800530b 	.word	0x0800530b

08005168 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	4613      	mov	r3, r2
 80051b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b8:	e02c      	b.n	8005214 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d028      	beq.n	8005214 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d007      	beq.n	80051d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051c8:	f7fc fb40 	bl	800184c <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d21d      	bcs.n	8005214 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695a      	ldr	r2, [r3, #20]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0201 	bic.w	r2, r2, #1
 80051f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e00f      	b.n	8005234 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4013      	ands	r3, r2
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	429a      	cmp	r2, r3
 8005222:	bf0c      	ite	eq
 8005224:	2301      	moveq	r3, #1
 8005226:	2300      	movne	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	461a      	mov	r2, r3
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	429a      	cmp	r2, r3
 8005230:	d0c3      	beq.n	80051ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	4613      	mov	r3, r2
 8005248:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	88fa      	ldrh	r2, [r7, #6]
 800525a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2222      	movs	r2, #34	; 0x22
 8005266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005280:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695a      	ldr	r2, [r3, #20]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0220 	orr.w	r2, r2, #32
 80052a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0201 	bic.w	r2, r2, #1
 80052d6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d107      	bne.n	80052f0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0210 	bic.w	r2, r2, #16
 80052ee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7ff ff29 	bl	800517c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b21      	cmp	r3, #33	; 0x21
 8005344:	d13e      	bne.n	80053c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534e:	d114      	bne.n	800537a <UART_Transmit_IT+0x48>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d110      	bne.n	800537a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800536c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	1c9a      	adds	r2, r3, #2
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	621a      	str	r2, [r3, #32]
 8005378:	e008      	b.n	800538c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	1c59      	adds	r1, r3, #1
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6211      	str	r1, [r2, #32]
 8005384:	781a      	ldrb	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29b      	uxth	r3, r3
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	4619      	mov	r1, r3
 800539a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10f      	bne.n	80053c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	e000      	b.n	80053c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053c4:	2302      	movs	r3, #2
  }
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff feb8 	bl	8005168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b22      	cmp	r3, #34	; 0x22
 8005414:	f040 8087 	bne.w	8005526 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005420:	d117      	bne.n	8005452 <UART_Receive_IT+0x50>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d113      	bne.n	8005452 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	b29b      	uxth	r3, r3
 800543c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005440:	b29a      	uxth	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	1c9a      	adds	r2, r3, #2
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	629a      	str	r2, [r3, #40]	; 0x28
 8005450:	e026      	b.n	80054a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005458:	2300      	movs	r3, #0
 800545a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005464:	d007      	beq.n	8005476 <UART_Receive_IT+0x74>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <UART_Receive_IT+0x82>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	b2da      	uxtb	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	e008      	b.n	8005496 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	b2db      	uxtb	r3, r3
 800548c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005490:	b2da      	uxtb	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	4619      	mov	r1, r3
 80054ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d136      	bne.n	8005522 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0220 	bic.w	r2, r2, #32
 80054c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695a      	ldr	r2, [r3, #20]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0201 	bic.w	r2, r2, #1
 80054e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d10e      	bne.n	8005512 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0210 	bic.w	r2, r2, #16
 8005502:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff fe40 	bl	8005190 <HAL_UARTEx_RxEventCallback>
 8005510:	e002      	b.n	8005518 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fb fd5c 	bl	8000fd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	e002      	b.n	8005528 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	e000      	b.n	8005528 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005526:	2302      	movs	r3, #2
  }
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	b09f      	sub	sp, #124	; 0x7c
 8005536:	af00      	add	r7, sp, #0
 8005538:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800553a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005546:	68d9      	ldr	r1, [r3, #12]
 8005548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	ea40 0301 	orr.w	r3, r0, r1
 8005550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	431a      	orrs	r2, r3
 800555c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	431a      	orrs	r2, r3
 8005562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	4313      	orrs	r3, r2
 8005568:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800556a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005574:	f021 010c 	bic.w	r1, r1, #12
 8005578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800557e:	430b      	orrs	r3, r1
 8005580:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800558c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558e:	6999      	ldr	r1, [r3, #24]
 8005590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	ea40 0301 	orr.w	r3, r0, r1
 8005598:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800559a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	4bc5      	ldr	r3, [pc, #788]	; (80058b4 <UART_SetConfig+0x384>)
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d004      	beq.n	80055ae <UART_SetConfig+0x7e>
 80055a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4bc3      	ldr	r3, [pc, #780]	; (80058b8 <UART_SetConfig+0x388>)
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d103      	bne.n	80055b6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055ae:	f7fd ff45 	bl	800343c <HAL_RCC_GetPCLK2Freq>
 80055b2:	6778      	str	r0, [r7, #116]	; 0x74
 80055b4:	e002      	b.n	80055bc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055b6:	f7fd ff2d 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 80055ba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c4:	f040 80b6 	bne.w	8005734 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ca:	461c      	mov	r4, r3
 80055cc:	f04f 0500 	mov.w	r5, #0
 80055d0:	4622      	mov	r2, r4
 80055d2:	462b      	mov	r3, r5
 80055d4:	1891      	adds	r1, r2, r2
 80055d6:	6439      	str	r1, [r7, #64]	; 0x40
 80055d8:	415b      	adcs	r3, r3
 80055da:	647b      	str	r3, [r7, #68]	; 0x44
 80055dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055e0:	1912      	adds	r2, r2, r4
 80055e2:	eb45 0303 	adc.w	r3, r5, r3
 80055e6:	f04f 0000 	mov.w	r0, #0
 80055ea:	f04f 0100 	mov.w	r1, #0
 80055ee:	00d9      	lsls	r1, r3, #3
 80055f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055f4:	00d0      	lsls	r0, r2, #3
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	1911      	adds	r1, r2, r4
 80055fc:	6639      	str	r1, [r7, #96]	; 0x60
 80055fe:	416b      	adcs	r3, r5
 8005600:	667b      	str	r3, [r7, #100]	; 0x64
 8005602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	461a      	mov	r2, r3
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	1891      	adds	r1, r2, r2
 800560e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005610:	415b      	adcs	r3, r3
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005614:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005618:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800561c:	f7fa fe50 	bl	80002c0 <__aeabi_uldivmod>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4ba5      	ldr	r3, [pc, #660]	; (80058bc <UART_SetConfig+0x38c>)
 8005626:	fba3 2302 	umull	r2, r3, r3, r2
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	011e      	lsls	r6, r3, #4
 800562e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005630:	461c      	mov	r4, r3
 8005632:	f04f 0500 	mov.w	r5, #0
 8005636:	4622      	mov	r2, r4
 8005638:	462b      	mov	r3, r5
 800563a:	1891      	adds	r1, r2, r2
 800563c:	6339      	str	r1, [r7, #48]	; 0x30
 800563e:	415b      	adcs	r3, r3
 8005640:	637b      	str	r3, [r7, #52]	; 0x34
 8005642:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005646:	1912      	adds	r2, r2, r4
 8005648:	eb45 0303 	adc.w	r3, r5, r3
 800564c:	f04f 0000 	mov.w	r0, #0
 8005650:	f04f 0100 	mov.w	r1, #0
 8005654:	00d9      	lsls	r1, r3, #3
 8005656:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800565a:	00d0      	lsls	r0, r2, #3
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	1911      	adds	r1, r2, r4
 8005662:	65b9      	str	r1, [r7, #88]	; 0x58
 8005664:	416b      	adcs	r3, r5
 8005666:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	461a      	mov	r2, r3
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	1891      	adds	r1, r2, r2
 8005674:	62b9      	str	r1, [r7, #40]	; 0x28
 8005676:	415b      	adcs	r3, r3
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800567a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800567e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005682:	f7fa fe1d 	bl	80002c0 <__aeabi_uldivmod>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4b8c      	ldr	r3, [pc, #560]	; (80058bc <UART_SetConfig+0x38c>)
 800568c:	fba3 1302 	umull	r1, r3, r3, r2
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	2164      	movs	r1, #100	; 0x64
 8005694:	fb01 f303 	mul.w	r3, r1, r3
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	3332      	adds	r3, #50	; 0x32
 800569e:	4a87      	ldr	r2, [pc, #540]	; (80058bc <UART_SetConfig+0x38c>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056ac:	441e      	add	r6, r3
 80056ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056b0:	4618      	mov	r0, r3
 80056b2:	f04f 0100 	mov.w	r1, #0
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	1894      	adds	r4, r2, r2
 80056bc:	623c      	str	r4, [r7, #32]
 80056be:	415b      	adcs	r3, r3
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
 80056c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056c6:	1812      	adds	r2, r2, r0
 80056c8:	eb41 0303 	adc.w	r3, r1, r3
 80056cc:	f04f 0400 	mov.w	r4, #0
 80056d0:	f04f 0500 	mov.w	r5, #0
 80056d4:	00dd      	lsls	r5, r3, #3
 80056d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056da:	00d4      	lsls	r4, r2, #3
 80056dc:	4622      	mov	r2, r4
 80056de:	462b      	mov	r3, r5
 80056e0:	1814      	adds	r4, r2, r0
 80056e2:	653c      	str	r4, [r7, #80]	; 0x50
 80056e4:	414b      	adcs	r3, r1
 80056e6:	657b      	str	r3, [r7, #84]	; 0x54
 80056e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	461a      	mov	r2, r3
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	1891      	adds	r1, r2, r2
 80056f4:	61b9      	str	r1, [r7, #24]
 80056f6:	415b      	adcs	r3, r3
 80056f8:	61fb      	str	r3, [r7, #28]
 80056fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005702:	f7fa fddd 	bl	80002c0 <__aeabi_uldivmod>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4b6c      	ldr	r3, [pc, #432]	; (80058bc <UART_SetConfig+0x38c>)
 800570c:	fba3 1302 	umull	r1, r3, r3, r2
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	2164      	movs	r1, #100	; 0x64
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	3332      	adds	r3, #50	; 0x32
 800571e:	4a67      	ldr	r2, [pc, #412]	; (80058bc <UART_SetConfig+0x38c>)
 8005720:	fba2 2303 	umull	r2, r3, r2, r3
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	f003 0207 	and.w	r2, r3, #7
 800572a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4432      	add	r2, r6
 8005730:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005732:	e0b9      	b.n	80058a8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005736:	461c      	mov	r4, r3
 8005738:	f04f 0500 	mov.w	r5, #0
 800573c:	4622      	mov	r2, r4
 800573e:	462b      	mov	r3, r5
 8005740:	1891      	adds	r1, r2, r2
 8005742:	6139      	str	r1, [r7, #16]
 8005744:	415b      	adcs	r3, r3
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800574c:	1912      	adds	r2, r2, r4
 800574e:	eb45 0303 	adc.w	r3, r5, r3
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f04f 0100 	mov.w	r1, #0
 800575a:	00d9      	lsls	r1, r3, #3
 800575c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005760:	00d0      	lsls	r0, r2, #3
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	eb12 0804 	adds.w	r8, r2, r4
 800576a:	eb43 0905 	adc.w	r9, r3, r5
 800576e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	4618      	mov	r0, r3
 8005774:	f04f 0100 	mov.w	r1, #0
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	f04f 0300 	mov.w	r3, #0
 8005780:	008b      	lsls	r3, r1, #2
 8005782:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005786:	0082      	lsls	r2, r0, #2
 8005788:	4640      	mov	r0, r8
 800578a:	4649      	mov	r1, r9
 800578c:	f7fa fd98 	bl	80002c0 <__aeabi_uldivmod>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4b49      	ldr	r3, [pc, #292]	; (80058bc <UART_SetConfig+0x38c>)
 8005796:	fba3 2302 	umull	r2, r3, r3, r2
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	011e      	lsls	r6, r3, #4
 800579e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057a0:	4618      	mov	r0, r3
 80057a2:	f04f 0100 	mov.w	r1, #0
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	1894      	adds	r4, r2, r2
 80057ac:	60bc      	str	r4, [r7, #8]
 80057ae:	415b      	adcs	r3, r3
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057b6:	1812      	adds	r2, r2, r0
 80057b8:	eb41 0303 	adc.w	r3, r1, r3
 80057bc:	f04f 0400 	mov.w	r4, #0
 80057c0:	f04f 0500 	mov.w	r5, #0
 80057c4:	00dd      	lsls	r5, r3, #3
 80057c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057ca:	00d4      	lsls	r4, r2, #3
 80057cc:	4622      	mov	r2, r4
 80057ce:	462b      	mov	r3, r5
 80057d0:	1814      	adds	r4, r2, r0
 80057d2:	64bc      	str	r4, [r7, #72]	; 0x48
 80057d4:	414b      	adcs	r3, r1
 80057d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	4618      	mov	r0, r3
 80057de:	f04f 0100 	mov.w	r1, #0
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	008b      	lsls	r3, r1, #2
 80057ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057f0:	0082      	lsls	r2, r0, #2
 80057f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80057f6:	f7fa fd63 	bl	80002c0 <__aeabi_uldivmod>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4b2f      	ldr	r3, [pc, #188]	; (80058bc <UART_SetConfig+0x38c>)
 8005800:	fba3 1302 	umull	r1, r3, r3, r2
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	2164      	movs	r1, #100	; 0x64
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	3332      	adds	r3, #50	; 0x32
 8005812:	4a2a      	ldr	r2, [pc, #168]	; (80058bc <UART_SetConfig+0x38c>)
 8005814:	fba2 2303 	umull	r2, r3, r2, r3
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800581e:	441e      	add	r6, r3
 8005820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005822:	4618      	mov	r0, r3
 8005824:	f04f 0100 	mov.w	r1, #0
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	1894      	adds	r4, r2, r2
 800582e:	603c      	str	r4, [r7, #0]
 8005830:	415b      	adcs	r3, r3
 8005832:	607b      	str	r3, [r7, #4]
 8005834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005838:	1812      	adds	r2, r2, r0
 800583a:	eb41 0303 	adc.w	r3, r1, r3
 800583e:	f04f 0400 	mov.w	r4, #0
 8005842:	f04f 0500 	mov.w	r5, #0
 8005846:	00dd      	lsls	r5, r3, #3
 8005848:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800584c:	00d4      	lsls	r4, r2, #3
 800584e:	4622      	mov	r2, r4
 8005850:	462b      	mov	r3, r5
 8005852:	eb12 0a00 	adds.w	sl, r2, r0
 8005856:	eb43 0b01 	adc.w	fp, r3, r1
 800585a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4618      	mov	r0, r3
 8005860:	f04f 0100 	mov.w	r1, #0
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	008b      	lsls	r3, r1, #2
 800586e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005872:	0082      	lsls	r2, r0, #2
 8005874:	4650      	mov	r0, sl
 8005876:	4659      	mov	r1, fp
 8005878:	f7fa fd22 	bl	80002c0 <__aeabi_uldivmod>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4b0e      	ldr	r3, [pc, #56]	; (80058bc <UART_SetConfig+0x38c>)
 8005882:	fba3 1302 	umull	r1, r3, r3, r2
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	2164      	movs	r1, #100	; 0x64
 800588a:	fb01 f303 	mul.w	r3, r1, r3
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	3332      	adds	r3, #50	; 0x32
 8005894:	4a09      	ldr	r2, [pc, #36]	; (80058bc <UART_SetConfig+0x38c>)
 8005896:	fba2 2303 	umull	r2, r3, r2, r3
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	f003 020f 	and.w	r2, r3, #15
 80058a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4432      	add	r2, r6
 80058a6:	609a      	str	r2, [r3, #8]
}
 80058a8:	bf00      	nop
 80058aa:	377c      	adds	r7, #124	; 0x7c
 80058ac:	46bd      	mov	sp, r7
 80058ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b2:	bf00      	nop
 80058b4:	40011000 	.word	0x40011000
 80058b8:	40011400 	.word	0x40011400
 80058bc:	51eb851f 	.word	0x51eb851f

080058c0 <atoi>:
 80058c0:	220a      	movs	r2, #10
 80058c2:	2100      	movs	r1, #0
 80058c4:	f000 b8d6 	b.w	8005a74 <strtol>

080058c8 <__errno>:
 80058c8:	4b01      	ldr	r3, [pc, #4]	; (80058d0 <__errno+0x8>)
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	20000038 	.word	0x20000038

080058d4 <__libc_init_array>:
 80058d4:	b570      	push	{r4, r5, r6, lr}
 80058d6:	4d0d      	ldr	r5, [pc, #52]	; (800590c <__libc_init_array+0x38>)
 80058d8:	4c0d      	ldr	r4, [pc, #52]	; (8005910 <__libc_init_array+0x3c>)
 80058da:	1b64      	subs	r4, r4, r5
 80058dc:	10a4      	asrs	r4, r4, #2
 80058de:	2600      	movs	r6, #0
 80058e0:	42a6      	cmp	r6, r4
 80058e2:	d109      	bne.n	80058f8 <__libc_init_array+0x24>
 80058e4:	4d0b      	ldr	r5, [pc, #44]	; (8005914 <__libc_init_array+0x40>)
 80058e6:	4c0c      	ldr	r4, [pc, #48]	; (8005918 <__libc_init_array+0x44>)
 80058e8:	f000 fcfc 	bl	80062e4 <_init>
 80058ec:	1b64      	subs	r4, r4, r5
 80058ee:	10a4      	asrs	r4, r4, #2
 80058f0:	2600      	movs	r6, #0
 80058f2:	42a6      	cmp	r6, r4
 80058f4:	d105      	bne.n	8005902 <__libc_init_array+0x2e>
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fc:	4798      	blx	r3
 80058fe:	3601      	adds	r6, #1
 8005900:	e7ee      	b.n	80058e0 <__libc_init_array+0xc>
 8005902:	f855 3b04 	ldr.w	r3, [r5], #4
 8005906:	4798      	blx	r3
 8005908:	3601      	adds	r6, #1
 800590a:	e7f2      	b.n	80058f2 <__libc_init_array+0x1e>
 800590c:	0800655c 	.word	0x0800655c
 8005910:	0800655c 	.word	0x0800655c
 8005914:	0800655c 	.word	0x0800655c
 8005918:	08006560 	.word	0x08006560

0800591c <memset>:
 800591c:	4402      	add	r2, r0
 800591e:	4603      	mov	r3, r0
 8005920:	4293      	cmp	r3, r2
 8005922:	d100      	bne.n	8005926 <memset+0xa>
 8005924:	4770      	bx	lr
 8005926:	f803 1b01 	strb.w	r1, [r3], #1
 800592a:	e7f9      	b.n	8005920 <memset+0x4>

0800592c <siprintf>:
 800592c:	b40e      	push	{r1, r2, r3}
 800592e:	b500      	push	{lr}
 8005930:	b09c      	sub	sp, #112	; 0x70
 8005932:	ab1d      	add	r3, sp, #116	; 0x74
 8005934:	9002      	str	r0, [sp, #8]
 8005936:	9006      	str	r0, [sp, #24]
 8005938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800593c:	4809      	ldr	r0, [pc, #36]	; (8005964 <siprintf+0x38>)
 800593e:	9107      	str	r1, [sp, #28]
 8005940:	9104      	str	r1, [sp, #16]
 8005942:	4909      	ldr	r1, [pc, #36]	; (8005968 <siprintf+0x3c>)
 8005944:	f853 2b04 	ldr.w	r2, [r3], #4
 8005948:	9105      	str	r1, [sp, #20]
 800594a:	6800      	ldr	r0, [r0, #0]
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	a902      	add	r1, sp, #8
 8005950:	f000 f916 	bl	8005b80 <_svfiprintf_r>
 8005954:	9b02      	ldr	r3, [sp, #8]
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	b01c      	add	sp, #112	; 0x70
 800595c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005960:	b003      	add	sp, #12
 8005962:	4770      	bx	lr
 8005964:	20000038 	.word	0x20000038
 8005968:	ffff0208 	.word	0xffff0208

0800596c <_strtol_l.isra.0>:
 800596c:	2b01      	cmp	r3, #1
 800596e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005972:	d001      	beq.n	8005978 <_strtol_l.isra.0+0xc>
 8005974:	2b24      	cmp	r3, #36	; 0x24
 8005976:	d906      	bls.n	8005986 <_strtol_l.isra.0+0x1a>
 8005978:	f7ff ffa6 	bl	80058c8 <__errno>
 800597c:	2316      	movs	r3, #22
 800597e:	6003      	str	r3, [r0, #0]
 8005980:	2000      	movs	r0, #0
 8005982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005986:	4f3a      	ldr	r7, [pc, #232]	; (8005a70 <_strtol_l.isra.0+0x104>)
 8005988:	468e      	mov	lr, r1
 800598a:	4676      	mov	r6, lr
 800598c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005990:	5de5      	ldrb	r5, [r4, r7]
 8005992:	f015 0508 	ands.w	r5, r5, #8
 8005996:	d1f8      	bne.n	800598a <_strtol_l.isra.0+0x1e>
 8005998:	2c2d      	cmp	r4, #45	; 0x2d
 800599a:	d134      	bne.n	8005a06 <_strtol_l.isra.0+0x9a>
 800599c:	f89e 4000 	ldrb.w	r4, [lr]
 80059a0:	f04f 0801 	mov.w	r8, #1
 80059a4:	f106 0e02 	add.w	lr, r6, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d05c      	beq.n	8005a66 <_strtol_l.isra.0+0xfa>
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d10c      	bne.n	80059ca <_strtol_l.isra.0+0x5e>
 80059b0:	2c30      	cmp	r4, #48	; 0x30
 80059b2:	d10a      	bne.n	80059ca <_strtol_l.isra.0+0x5e>
 80059b4:	f89e 4000 	ldrb.w	r4, [lr]
 80059b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80059bc:	2c58      	cmp	r4, #88	; 0x58
 80059be:	d14d      	bne.n	8005a5c <_strtol_l.isra.0+0xf0>
 80059c0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80059c4:	2310      	movs	r3, #16
 80059c6:	f10e 0e02 	add.w	lr, lr, #2
 80059ca:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80059ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80059d2:	2600      	movs	r6, #0
 80059d4:	fbbc f9f3 	udiv	r9, ip, r3
 80059d8:	4635      	mov	r5, r6
 80059da:	fb03 ca19 	mls	sl, r3, r9, ip
 80059de:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80059e2:	2f09      	cmp	r7, #9
 80059e4:	d818      	bhi.n	8005a18 <_strtol_l.isra.0+0xac>
 80059e6:	463c      	mov	r4, r7
 80059e8:	42a3      	cmp	r3, r4
 80059ea:	dd24      	ble.n	8005a36 <_strtol_l.isra.0+0xca>
 80059ec:	2e00      	cmp	r6, #0
 80059ee:	db1f      	blt.n	8005a30 <_strtol_l.isra.0+0xc4>
 80059f0:	45a9      	cmp	r9, r5
 80059f2:	d31d      	bcc.n	8005a30 <_strtol_l.isra.0+0xc4>
 80059f4:	d101      	bne.n	80059fa <_strtol_l.isra.0+0x8e>
 80059f6:	45a2      	cmp	sl, r4
 80059f8:	db1a      	blt.n	8005a30 <_strtol_l.isra.0+0xc4>
 80059fa:	fb05 4503 	mla	r5, r5, r3, r4
 80059fe:	2601      	movs	r6, #1
 8005a00:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005a04:	e7eb      	b.n	80059de <_strtol_l.isra.0+0x72>
 8005a06:	2c2b      	cmp	r4, #43	; 0x2b
 8005a08:	bf08      	it	eq
 8005a0a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005a0e:	46a8      	mov	r8, r5
 8005a10:	bf08      	it	eq
 8005a12:	f106 0e02 	addeq.w	lr, r6, #2
 8005a16:	e7c7      	b.n	80059a8 <_strtol_l.isra.0+0x3c>
 8005a18:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005a1c:	2f19      	cmp	r7, #25
 8005a1e:	d801      	bhi.n	8005a24 <_strtol_l.isra.0+0xb8>
 8005a20:	3c37      	subs	r4, #55	; 0x37
 8005a22:	e7e1      	b.n	80059e8 <_strtol_l.isra.0+0x7c>
 8005a24:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005a28:	2f19      	cmp	r7, #25
 8005a2a:	d804      	bhi.n	8005a36 <_strtol_l.isra.0+0xca>
 8005a2c:	3c57      	subs	r4, #87	; 0x57
 8005a2e:	e7db      	b.n	80059e8 <_strtol_l.isra.0+0x7c>
 8005a30:	f04f 36ff 	mov.w	r6, #4294967295
 8005a34:	e7e4      	b.n	8005a00 <_strtol_l.isra.0+0x94>
 8005a36:	2e00      	cmp	r6, #0
 8005a38:	da05      	bge.n	8005a46 <_strtol_l.isra.0+0xda>
 8005a3a:	2322      	movs	r3, #34	; 0x22
 8005a3c:	6003      	str	r3, [r0, #0]
 8005a3e:	4665      	mov	r5, ip
 8005a40:	b942      	cbnz	r2, 8005a54 <_strtol_l.isra.0+0xe8>
 8005a42:	4628      	mov	r0, r5
 8005a44:	e79d      	b.n	8005982 <_strtol_l.isra.0+0x16>
 8005a46:	f1b8 0f00 	cmp.w	r8, #0
 8005a4a:	d000      	beq.n	8005a4e <_strtol_l.isra.0+0xe2>
 8005a4c:	426d      	negs	r5, r5
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	d0f7      	beq.n	8005a42 <_strtol_l.isra.0+0xd6>
 8005a52:	b10e      	cbz	r6, 8005a58 <_strtol_l.isra.0+0xec>
 8005a54:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005a58:	6011      	str	r1, [r2, #0]
 8005a5a:	e7f2      	b.n	8005a42 <_strtol_l.isra.0+0xd6>
 8005a5c:	2430      	movs	r4, #48	; 0x30
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1b3      	bne.n	80059ca <_strtol_l.isra.0+0x5e>
 8005a62:	2308      	movs	r3, #8
 8005a64:	e7b1      	b.n	80059ca <_strtol_l.isra.0+0x5e>
 8005a66:	2c30      	cmp	r4, #48	; 0x30
 8005a68:	d0a4      	beq.n	80059b4 <_strtol_l.isra.0+0x48>
 8005a6a:	230a      	movs	r3, #10
 8005a6c:	e7ad      	b.n	80059ca <_strtol_l.isra.0+0x5e>
 8005a6e:	bf00      	nop
 8005a70:	08006421 	.word	0x08006421

08005a74 <strtol>:
 8005a74:	4613      	mov	r3, r2
 8005a76:	460a      	mov	r2, r1
 8005a78:	4601      	mov	r1, r0
 8005a7a:	4802      	ldr	r0, [pc, #8]	; (8005a84 <strtol+0x10>)
 8005a7c:	6800      	ldr	r0, [r0, #0]
 8005a7e:	f7ff bf75 	b.w	800596c <_strtol_l.isra.0>
 8005a82:	bf00      	nop
 8005a84:	20000038 	.word	0x20000038

08005a88 <_vsiprintf_r>:
 8005a88:	b500      	push	{lr}
 8005a8a:	b09b      	sub	sp, #108	; 0x6c
 8005a8c:	9100      	str	r1, [sp, #0]
 8005a8e:	9104      	str	r1, [sp, #16]
 8005a90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a94:	9105      	str	r1, [sp, #20]
 8005a96:	9102      	str	r1, [sp, #8]
 8005a98:	4905      	ldr	r1, [pc, #20]	; (8005ab0 <_vsiprintf_r+0x28>)
 8005a9a:	9103      	str	r1, [sp, #12]
 8005a9c:	4669      	mov	r1, sp
 8005a9e:	f000 f86f 	bl	8005b80 <_svfiprintf_r>
 8005aa2:	9b00      	ldr	r3, [sp, #0]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	b01b      	add	sp, #108	; 0x6c
 8005aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8005aae:	bf00      	nop
 8005ab0:	ffff0208 	.word	0xffff0208

08005ab4 <vsiprintf>:
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	4601      	mov	r1, r0
 8005aba:	4802      	ldr	r0, [pc, #8]	; (8005ac4 <vsiprintf+0x10>)
 8005abc:	6800      	ldr	r0, [r0, #0]
 8005abe:	f7ff bfe3 	b.w	8005a88 <_vsiprintf_r>
 8005ac2:	bf00      	nop
 8005ac4:	20000038 	.word	0x20000038

08005ac8 <__ssputs_r>:
 8005ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005acc:	688e      	ldr	r6, [r1, #8]
 8005ace:	429e      	cmp	r6, r3
 8005ad0:	4682      	mov	sl, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	4690      	mov	r8, r2
 8005ad6:	461f      	mov	r7, r3
 8005ad8:	d838      	bhi.n	8005b4c <__ssputs_r+0x84>
 8005ada:	898a      	ldrh	r2, [r1, #12]
 8005adc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ae0:	d032      	beq.n	8005b48 <__ssputs_r+0x80>
 8005ae2:	6825      	ldr	r5, [r4, #0]
 8005ae4:	6909      	ldr	r1, [r1, #16]
 8005ae6:	eba5 0901 	sub.w	r9, r5, r1
 8005aea:	6965      	ldr	r5, [r4, #20]
 8005aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005af0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005af4:	3301      	adds	r3, #1
 8005af6:	444b      	add	r3, r9
 8005af8:	106d      	asrs	r5, r5, #1
 8005afa:	429d      	cmp	r5, r3
 8005afc:	bf38      	it	cc
 8005afe:	461d      	movcc	r5, r3
 8005b00:	0553      	lsls	r3, r2, #21
 8005b02:	d531      	bpl.n	8005b68 <__ssputs_r+0xa0>
 8005b04:	4629      	mov	r1, r5
 8005b06:	f000 fb47 	bl	8006198 <_malloc_r>
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	b950      	cbnz	r0, 8005b24 <__ssputs_r+0x5c>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	f8ca 3000 	str.w	r3, [sl]
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b1a:	81a3      	strh	r3, [r4, #12]
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b24:	6921      	ldr	r1, [r4, #16]
 8005b26:	464a      	mov	r2, r9
 8005b28:	f000 fabe 	bl	80060a8 <memcpy>
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	6126      	str	r6, [r4, #16]
 8005b3a:	6165      	str	r5, [r4, #20]
 8005b3c:	444e      	add	r6, r9
 8005b3e:	eba5 0509 	sub.w	r5, r5, r9
 8005b42:	6026      	str	r6, [r4, #0]
 8005b44:	60a5      	str	r5, [r4, #8]
 8005b46:	463e      	mov	r6, r7
 8005b48:	42be      	cmp	r6, r7
 8005b4a:	d900      	bls.n	8005b4e <__ssputs_r+0x86>
 8005b4c:	463e      	mov	r6, r7
 8005b4e:	4632      	mov	r2, r6
 8005b50:	6820      	ldr	r0, [r4, #0]
 8005b52:	4641      	mov	r1, r8
 8005b54:	f000 fab6 	bl	80060c4 <memmove>
 8005b58:	68a3      	ldr	r3, [r4, #8]
 8005b5a:	6822      	ldr	r2, [r4, #0]
 8005b5c:	1b9b      	subs	r3, r3, r6
 8005b5e:	4432      	add	r2, r6
 8005b60:	60a3      	str	r3, [r4, #8]
 8005b62:	6022      	str	r2, [r4, #0]
 8005b64:	2000      	movs	r0, #0
 8005b66:	e7db      	b.n	8005b20 <__ssputs_r+0x58>
 8005b68:	462a      	mov	r2, r5
 8005b6a:	f000 fb6f 	bl	800624c <_realloc_r>
 8005b6e:	4606      	mov	r6, r0
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d1e1      	bne.n	8005b38 <__ssputs_r+0x70>
 8005b74:	6921      	ldr	r1, [r4, #16]
 8005b76:	4650      	mov	r0, sl
 8005b78:	f000 fabe 	bl	80060f8 <_free_r>
 8005b7c:	e7c7      	b.n	8005b0e <__ssputs_r+0x46>
	...

08005b80 <_svfiprintf_r>:
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	4698      	mov	r8, r3
 8005b86:	898b      	ldrh	r3, [r1, #12]
 8005b88:	061b      	lsls	r3, r3, #24
 8005b8a:	b09d      	sub	sp, #116	; 0x74
 8005b8c:	4607      	mov	r7, r0
 8005b8e:	460d      	mov	r5, r1
 8005b90:	4614      	mov	r4, r2
 8005b92:	d50e      	bpl.n	8005bb2 <_svfiprintf_r+0x32>
 8005b94:	690b      	ldr	r3, [r1, #16]
 8005b96:	b963      	cbnz	r3, 8005bb2 <_svfiprintf_r+0x32>
 8005b98:	2140      	movs	r1, #64	; 0x40
 8005b9a:	f000 fafd 	bl	8006198 <_malloc_r>
 8005b9e:	6028      	str	r0, [r5, #0]
 8005ba0:	6128      	str	r0, [r5, #16]
 8005ba2:	b920      	cbnz	r0, 8005bae <_svfiprintf_r+0x2e>
 8005ba4:	230c      	movs	r3, #12
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bac:	e0d1      	b.n	8005d52 <_svfiprintf_r+0x1d2>
 8005bae:	2340      	movs	r3, #64	; 0x40
 8005bb0:	616b      	str	r3, [r5, #20]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb6:	2320      	movs	r3, #32
 8005bb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bc0:	2330      	movs	r3, #48	; 0x30
 8005bc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d6c <_svfiprintf_r+0x1ec>
 8005bc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bca:	f04f 0901 	mov.w	r9, #1
 8005bce:	4623      	mov	r3, r4
 8005bd0:	469a      	mov	sl, r3
 8005bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bd6:	b10a      	cbz	r2, 8005bdc <_svfiprintf_r+0x5c>
 8005bd8:	2a25      	cmp	r2, #37	; 0x25
 8005bda:	d1f9      	bne.n	8005bd0 <_svfiprintf_r+0x50>
 8005bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8005be0:	d00b      	beq.n	8005bfa <_svfiprintf_r+0x7a>
 8005be2:	465b      	mov	r3, fp
 8005be4:	4622      	mov	r2, r4
 8005be6:	4629      	mov	r1, r5
 8005be8:	4638      	mov	r0, r7
 8005bea:	f7ff ff6d 	bl	8005ac8 <__ssputs_r>
 8005bee:	3001      	adds	r0, #1
 8005bf0:	f000 80aa 	beq.w	8005d48 <_svfiprintf_r+0x1c8>
 8005bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bf6:	445a      	add	r2, fp
 8005bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8005bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 80a2 	beq.w	8005d48 <_svfiprintf_r+0x1c8>
 8005c04:	2300      	movs	r3, #0
 8005c06:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c0e:	f10a 0a01 	add.w	sl, sl, #1
 8005c12:	9304      	str	r3, [sp, #16]
 8005c14:	9307      	str	r3, [sp, #28]
 8005c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8005c1c:	4654      	mov	r4, sl
 8005c1e:	2205      	movs	r2, #5
 8005c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c24:	4851      	ldr	r0, [pc, #324]	; (8005d6c <_svfiprintf_r+0x1ec>)
 8005c26:	f7fa fafb 	bl	8000220 <memchr>
 8005c2a:	9a04      	ldr	r2, [sp, #16]
 8005c2c:	b9d8      	cbnz	r0, 8005c66 <_svfiprintf_r+0xe6>
 8005c2e:	06d0      	lsls	r0, r2, #27
 8005c30:	bf44      	itt	mi
 8005c32:	2320      	movmi	r3, #32
 8005c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c38:	0711      	lsls	r1, r2, #28
 8005c3a:	bf44      	itt	mi
 8005c3c:	232b      	movmi	r3, #43	; 0x2b
 8005c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c42:	f89a 3000 	ldrb.w	r3, [sl]
 8005c46:	2b2a      	cmp	r3, #42	; 0x2a
 8005c48:	d015      	beq.n	8005c76 <_svfiprintf_r+0xf6>
 8005c4a:	9a07      	ldr	r2, [sp, #28]
 8005c4c:	4654      	mov	r4, sl
 8005c4e:	2000      	movs	r0, #0
 8005c50:	f04f 0c0a 	mov.w	ip, #10
 8005c54:	4621      	mov	r1, r4
 8005c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c5a:	3b30      	subs	r3, #48	; 0x30
 8005c5c:	2b09      	cmp	r3, #9
 8005c5e:	d94e      	bls.n	8005cfe <_svfiprintf_r+0x17e>
 8005c60:	b1b0      	cbz	r0, 8005c90 <_svfiprintf_r+0x110>
 8005c62:	9207      	str	r2, [sp, #28]
 8005c64:	e014      	b.n	8005c90 <_svfiprintf_r+0x110>
 8005c66:	eba0 0308 	sub.w	r3, r0, r8
 8005c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	9304      	str	r3, [sp, #16]
 8005c72:	46a2      	mov	sl, r4
 8005c74:	e7d2      	b.n	8005c1c <_svfiprintf_r+0x9c>
 8005c76:	9b03      	ldr	r3, [sp, #12]
 8005c78:	1d19      	adds	r1, r3, #4
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	9103      	str	r1, [sp, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfbb      	ittet	lt
 8005c82:	425b      	neglt	r3, r3
 8005c84:	f042 0202 	orrlt.w	r2, r2, #2
 8005c88:	9307      	strge	r3, [sp, #28]
 8005c8a:	9307      	strlt	r3, [sp, #28]
 8005c8c:	bfb8      	it	lt
 8005c8e:	9204      	strlt	r2, [sp, #16]
 8005c90:	7823      	ldrb	r3, [r4, #0]
 8005c92:	2b2e      	cmp	r3, #46	; 0x2e
 8005c94:	d10c      	bne.n	8005cb0 <_svfiprintf_r+0x130>
 8005c96:	7863      	ldrb	r3, [r4, #1]
 8005c98:	2b2a      	cmp	r3, #42	; 0x2a
 8005c9a:	d135      	bne.n	8005d08 <_svfiprintf_r+0x188>
 8005c9c:	9b03      	ldr	r3, [sp, #12]
 8005c9e:	1d1a      	adds	r2, r3, #4
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	9203      	str	r2, [sp, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bfb8      	it	lt
 8005ca8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cac:	3402      	adds	r4, #2
 8005cae:	9305      	str	r3, [sp, #20]
 8005cb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d7c <_svfiprintf_r+0x1fc>
 8005cb4:	7821      	ldrb	r1, [r4, #0]
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	4650      	mov	r0, sl
 8005cba:	f7fa fab1 	bl	8000220 <memchr>
 8005cbe:	b140      	cbz	r0, 8005cd2 <_svfiprintf_r+0x152>
 8005cc0:	2340      	movs	r3, #64	; 0x40
 8005cc2:	eba0 000a 	sub.w	r0, r0, sl
 8005cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8005cca:	9b04      	ldr	r3, [sp, #16]
 8005ccc:	4303      	orrs	r3, r0
 8005cce:	3401      	adds	r4, #1
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cd6:	4826      	ldr	r0, [pc, #152]	; (8005d70 <_svfiprintf_r+0x1f0>)
 8005cd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cdc:	2206      	movs	r2, #6
 8005cde:	f7fa fa9f 	bl	8000220 <memchr>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d038      	beq.n	8005d58 <_svfiprintf_r+0x1d8>
 8005ce6:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <_svfiprintf_r+0x1f4>)
 8005ce8:	bb1b      	cbnz	r3, 8005d32 <_svfiprintf_r+0x1b2>
 8005cea:	9b03      	ldr	r3, [sp, #12]
 8005cec:	3307      	adds	r3, #7
 8005cee:	f023 0307 	bic.w	r3, r3, #7
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	9303      	str	r3, [sp, #12]
 8005cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf8:	4433      	add	r3, r6
 8005cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfc:	e767      	b.n	8005bce <_svfiprintf_r+0x4e>
 8005cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d02:	460c      	mov	r4, r1
 8005d04:	2001      	movs	r0, #1
 8005d06:	e7a5      	b.n	8005c54 <_svfiprintf_r+0xd4>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	3401      	adds	r4, #1
 8005d0c:	9305      	str	r3, [sp, #20]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	f04f 0c0a 	mov.w	ip, #10
 8005d14:	4620      	mov	r0, r4
 8005d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d1a:	3a30      	subs	r2, #48	; 0x30
 8005d1c:	2a09      	cmp	r2, #9
 8005d1e:	d903      	bls.n	8005d28 <_svfiprintf_r+0x1a8>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0c5      	beq.n	8005cb0 <_svfiprintf_r+0x130>
 8005d24:	9105      	str	r1, [sp, #20]
 8005d26:	e7c3      	b.n	8005cb0 <_svfiprintf_r+0x130>
 8005d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e7f0      	b.n	8005d14 <_svfiprintf_r+0x194>
 8005d32:	ab03      	add	r3, sp, #12
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	462a      	mov	r2, r5
 8005d38:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <_svfiprintf_r+0x1f8>)
 8005d3a:	a904      	add	r1, sp, #16
 8005d3c:	4638      	mov	r0, r7
 8005d3e:	f3af 8000 	nop.w
 8005d42:	1c42      	adds	r2, r0, #1
 8005d44:	4606      	mov	r6, r0
 8005d46:	d1d6      	bne.n	8005cf6 <_svfiprintf_r+0x176>
 8005d48:	89ab      	ldrh	r3, [r5, #12]
 8005d4a:	065b      	lsls	r3, r3, #25
 8005d4c:	f53f af2c 	bmi.w	8005ba8 <_svfiprintf_r+0x28>
 8005d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d52:	b01d      	add	sp, #116	; 0x74
 8005d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d58:	ab03      	add	r3, sp, #12
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	462a      	mov	r2, r5
 8005d5e:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <_svfiprintf_r+0x1f8>)
 8005d60:	a904      	add	r1, sp, #16
 8005d62:	4638      	mov	r0, r7
 8005d64:	f000 f87a 	bl	8005e5c <_printf_i>
 8005d68:	e7eb      	b.n	8005d42 <_svfiprintf_r+0x1c2>
 8005d6a:	bf00      	nop
 8005d6c:	08006521 	.word	0x08006521
 8005d70:	0800652b 	.word	0x0800652b
 8005d74:	00000000 	.word	0x00000000
 8005d78:	08005ac9 	.word	0x08005ac9
 8005d7c:	08006527 	.word	0x08006527

08005d80 <_printf_common>:
 8005d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d84:	4616      	mov	r6, r2
 8005d86:	4699      	mov	r9, r3
 8005d88:	688a      	ldr	r2, [r1, #8]
 8005d8a:	690b      	ldr	r3, [r1, #16]
 8005d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d90:	4293      	cmp	r3, r2
 8005d92:	bfb8      	it	lt
 8005d94:	4613      	movlt	r3, r2
 8005d96:	6033      	str	r3, [r6, #0]
 8005d98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d9c:	4607      	mov	r7, r0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	b10a      	cbz	r2, 8005da6 <_printf_common+0x26>
 8005da2:	3301      	adds	r3, #1
 8005da4:	6033      	str	r3, [r6, #0]
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	0699      	lsls	r1, r3, #26
 8005daa:	bf42      	ittt	mi
 8005dac:	6833      	ldrmi	r3, [r6, #0]
 8005dae:	3302      	addmi	r3, #2
 8005db0:	6033      	strmi	r3, [r6, #0]
 8005db2:	6825      	ldr	r5, [r4, #0]
 8005db4:	f015 0506 	ands.w	r5, r5, #6
 8005db8:	d106      	bne.n	8005dc8 <_printf_common+0x48>
 8005dba:	f104 0a19 	add.w	sl, r4, #25
 8005dbe:	68e3      	ldr	r3, [r4, #12]
 8005dc0:	6832      	ldr	r2, [r6, #0]
 8005dc2:	1a9b      	subs	r3, r3, r2
 8005dc4:	42ab      	cmp	r3, r5
 8005dc6:	dc26      	bgt.n	8005e16 <_printf_common+0x96>
 8005dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dcc:	1e13      	subs	r3, r2, #0
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	bf18      	it	ne
 8005dd2:	2301      	movne	r3, #1
 8005dd4:	0692      	lsls	r2, r2, #26
 8005dd6:	d42b      	bmi.n	8005e30 <_printf_common+0xb0>
 8005dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ddc:	4649      	mov	r1, r9
 8005dde:	4638      	mov	r0, r7
 8005de0:	47c0      	blx	r8
 8005de2:	3001      	adds	r0, #1
 8005de4:	d01e      	beq.n	8005e24 <_printf_common+0xa4>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	68e5      	ldr	r5, [r4, #12]
 8005dea:	6832      	ldr	r2, [r6, #0]
 8005dec:	f003 0306 	and.w	r3, r3, #6
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	bf08      	it	eq
 8005df4:	1aad      	subeq	r5, r5, r2
 8005df6:	68a3      	ldr	r3, [r4, #8]
 8005df8:	6922      	ldr	r2, [r4, #16]
 8005dfa:	bf0c      	ite	eq
 8005dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e00:	2500      	movne	r5, #0
 8005e02:	4293      	cmp	r3, r2
 8005e04:	bfc4      	itt	gt
 8005e06:	1a9b      	subgt	r3, r3, r2
 8005e08:	18ed      	addgt	r5, r5, r3
 8005e0a:	2600      	movs	r6, #0
 8005e0c:	341a      	adds	r4, #26
 8005e0e:	42b5      	cmp	r5, r6
 8005e10:	d11a      	bne.n	8005e48 <_printf_common+0xc8>
 8005e12:	2000      	movs	r0, #0
 8005e14:	e008      	b.n	8005e28 <_printf_common+0xa8>
 8005e16:	2301      	movs	r3, #1
 8005e18:	4652      	mov	r2, sl
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	47c0      	blx	r8
 8005e20:	3001      	adds	r0, #1
 8005e22:	d103      	bne.n	8005e2c <_printf_common+0xac>
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295
 8005e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e2c:	3501      	adds	r5, #1
 8005e2e:	e7c6      	b.n	8005dbe <_printf_common+0x3e>
 8005e30:	18e1      	adds	r1, r4, r3
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	2030      	movs	r0, #48	; 0x30
 8005e36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e3a:	4422      	add	r2, r4
 8005e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e44:	3302      	adds	r3, #2
 8005e46:	e7c7      	b.n	8005dd8 <_printf_common+0x58>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	4622      	mov	r2, r4
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	4638      	mov	r0, r7
 8005e50:	47c0      	blx	r8
 8005e52:	3001      	adds	r0, #1
 8005e54:	d0e6      	beq.n	8005e24 <_printf_common+0xa4>
 8005e56:	3601      	adds	r6, #1
 8005e58:	e7d9      	b.n	8005e0e <_printf_common+0x8e>
	...

08005e5c <_printf_i>:
 8005e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e60:	460c      	mov	r4, r1
 8005e62:	4691      	mov	r9, r2
 8005e64:	7e27      	ldrb	r7, [r4, #24]
 8005e66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e68:	2f78      	cmp	r7, #120	; 0x78
 8005e6a:	4680      	mov	r8, r0
 8005e6c:	469a      	mov	sl, r3
 8005e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e72:	d807      	bhi.n	8005e84 <_printf_i+0x28>
 8005e74:	2f62      	cmp	r7, #98	; 0x62
 8005e76:	d80a      	bhi.n	8005e8e <_printf_i+0x32>
 8005e78:	2f00      	cmp	r7, #0
 8005e7a:	f000 80d8 	beq.w	800602e <_printf_i+0x1d2>
 8005e7e:	2f58      	cmp	r7, #88	; 0x58
 8005e80:	f000 80a3 	beq.w	8005fca <_printf_i+0x16e>
 8005e84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e8c:	e03a      	b.n	8005f04 <_printf_i+0xa8>
 8005e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e92:	2b15      	cmp	r3, #21
 8005e94:	d8f6      	bhi.n	8005e84 <_printf_i+0x28>
 8005e96:	a001      	add	r0, pc, #4	; (adr r0, 8005e9c <_printf_i+0x40>)
 8005e98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e9c:	08005ef5 	.word	0x08005ef5
 8005ea0:	08005f09 	.word	0x08005f09
 8005ea4:	08005e85 	.word	0x08005e85
 8005ea8:	08005e85 	.word	0x08005e85
 8005eac:	08005e85 	.word	0x08005e85
 8005eb0:	08005e85 	.word	0x08005e85
 8005eb4:	08005f09 	.word	0x08005f09
 8005eb8:	08005e85 	.word	0x08005e85
 8005ebc:	08005e85 	.word	0x08005e85
 8005ec0:	08005e85 	.word	0x08005e85
 8005ec4:	08005e85 	.word	0x08005e85
 8005ec8:	08006015 	.word	0x08006015
 8005ecc:	08005f39 	.word	0x08005f39
 8005ed0:	08005ff7 	.word	0x08005ff7
 8005ed4:	08005e85 	.word	0x08005e85
 8005ed8:	08005e85 	.word	0x08005e85
 8005edc:	08006037 	.word	0x08006037
 8005ee0:	08005e85 	.word	0x08005e85
 8005ee4:	08005f39 	.word	0x08005f39
 8005ee8:	08005e85 	.word	0x08005e85
 8005eec:	08005e85 	.word	0x08005e85
 8005ef0:	08005fff 	.word	0x08005fff
 8005ef4:	680b      	ldr	r3, [r1, #0]
 8005ef6:	1d1a      	adds	r2, r3, #4
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	600a      	str	r2, [r1, #0]
 8005efc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0a3      	b.n	8006050 <_printf_i+0x1f4>
 8005f08:	6825      	ldr	r5, [r4, #0]
 8005f0a:	6808      	ldr	r0, [r1, #0]
 8005f0c:	062e      	lsls	r6, r5, #24
 8005f0e:	f100 0304 	add.w	r3, r0, #4
 8005f12:	d50a      	bpl.n	8005f2a <_printf_i+0xce>
 8005f14:	6805      	ldr	r5, [r0, #0]
 8005f16:	600b      	str	r3, [r1, #0]
 8005f18:	2d00      	cmp	r5, #0
 8005f1a:	da03      	bge.n	8005f24 <_printf_i+0xc8>
 8005f1c:	232d      	movs	r3, #45	; 0x2d
 8005f1e:	426d      	negs	r5, r5
 8005f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f24:	485e      	ldr	r0, [pc, #376]	; (80060a0 <_printf_i+0x244>)
 8005f26:	230a      	movs	r3, #10
 8005f28:	e019      	b.n	8005f5e <_printf_i+0x102>
 8005f2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f2e:	6805      	ldr	r5, [r0, #0]
 8005f30:	600b      	str	r3, [r1, #0]
 8005f32:	bf18      	it	ne
 8005f34:	b22d      	sxthne	r5, r5
 8005f36:	e7ef      	b.n	8005f18 <_printf_i+0xbc>
 8005f38:	680b      	ldr	r3, [r1, #0]
 8005f3a:	6825      	ldr	r5, [r4, #0]
 8005f3c:	1d18      	adds	r0, r3, #4
 8005f3e:	6008      	str	r0, [r1, #0]
 8005f40:	0628      	lsls	r0, r5, #24
 8005f42:	d501      	bpl.n	8005f48 <_printf_i+0xec>
 8005f44:	681d      	ldr	r5, [r3, #0]
 8005f46:	e002      	b.n	8005f4e <_printf_i+0xf2>
 8005f48:	0669      	lsls	r1, r5, #25
 8005f4a:	d5fb      	bpl.n	8005f44 <_printf_i+0xe8>
 8005f4c:	881d      	ldrh	r5, [r3, #0]
 8005f4e:	4854      	ldr	r0, [pc, #336]	; (80060a0 <_printf_i+0x244>)
 8005f50:	2f6f      	cmp	r7, #111	; 0x6f
 8005f52:	bf0c      	ite	eq
 8005f54:	2308      	moveq	r3, #8
 8005f56:	230a      	movne	r3, #10
 8005f58:	2100      	movs	r1, #0
 8005f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f5e:	6866      	ldr	r6, [r4, #4]
 8005f60:	60a6      	str	r6, [r4, #8]
 8005f62:	2e00      	cmp	r6, #0
 8005f64:	bfa2      	ittt	ge
 8005f66:	6821      	ldrge	r1, [r4, #0]
 8005f68:	f021 0104 	bicge.w	r1, r1, #4
 8005f6c:	6021      	strge	r1, [r4, #0]
 8005f6e:	b90d      	cbnz	r5, 8005f74 <_printf_i+0x118>
 8005f70:	2e00      	cmp	r6, #0
 8005f72:	d04d      	beq.n	8006010 <_printf_i+0x1b4>
 8005f74:	4616      	mov	r6, r2
 8005f76:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f7a:	fb03 5711 	mls	r7, r3, r1, r5
 8005f7e:	5dc7      	ldrb	r7, [r0, r7]
 8005f80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f84:	462f      	mov	r7, r5
 8005f86:	42bb      	cmp	r3, r7
 8005f88:	460d      	mov	r5, r1
 8005f8a:	d9f4      	bls.n	8005f76 <_printf_i+0x11a>
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d10b      	bne.n	8005fa8 <_printf_i+0x14c>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	07df      	lsls	r7, r3, #31
 8005f94:	d508      	bpl.n	8005fa8 <_printf_i+0x14c>
 8005f96:	6923      	ldr	r3, [r4, #16]
 8005f98:	6861      	ldr	r1, [r4, #4]
 8005f9a:	4299      	cmp	r1, r3
 8005f9c:	bfde      	ittt	le
 8005f9e:	2330      	movle	r3, #48	; 0x30
 8005fa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fa8:	1b92      	subs	r2, r2, r6
 8005faa:	6122      	str	r2, [r4, #16]
 8005fac:	f8cd a000 	str.w	sl, [sp]
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	aa03      	add	r2, sp, #12
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	f7ff fee2 	bl	8005d80 <_printf_common>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d14c      	bne.n	800605a <_printf_i+0x1fe>
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc4:	b004      	add	sp, #16
 8005fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fca:	4835      	ldr	r0, [pc, #212]	; (80060a0 <_printf_i+0x244>)
 8005fcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	680e      	ldr	r6, [r1, #0]
 8005fd4:	061f      	lsls	r7, r3, #24
 8005fd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005fda:	600e      	str	r6, [r1, #0]
 8005fdc:	d514      	bpl.n	8006008 <_printf_i+0x1ac>
 8005fde:	07d9      	lsls	r1, r3, #31
 8005fe0:	bf44      	itt	mi
 8005fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8005fe6:	6023      	strmi	r3, [r4, #0]
 8005fe8:	b91d      	cbnz	r5, 8005ff2 <_printf_i+0x196>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	f023 0320 	bic.w	r3, r3, #32
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	2310      	movs	r3, #16
 8005ff4:	e7b0      	b.n	8005f58 <_printf_i+0xfc>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	f043 0320 	orr.w	r3, r3, #32
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	2378      	movs	r3, #120	; 0x78
 8006000:	4828      	ldr	r0, [pc, #160]	; (80060a4 <_printf_i+0x248>)
 8006002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006006:	e7e3      	b.n	8005fd0 <_printf_i+0x174>
 8006008:	065e      	lsls	r6, r3, #25
 800600a:	bf48      	it	mi
 800600c:	b2ad      	uxthmi	r5, r5
 800600e:	e7e6      	b.n	8005fde <_printf_i+0x182>
 8006010:	4616      	mov	r6, r2
 8006012:	e7bb      	b.n	8005f8c <_printf_i+0x130>
 8006014:	680b      	ldr	r3, [r1, #0]
 8006016:	6826      	ldr	r6, [r4, #0]
 8006018:	6960      	ldr	r0, [r4, #20]
 800601a:	1d1d      	adds	r5, r3, #4
 800601c:	600d      	str	r5, [r1, #0]
 800601e:	0635      	lsls	r5, r6, #24
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	d501      	bpl.n	8006028 <_printf_i+0x1cc>
 8006024:	6018      	str	r0, [r3, #0]
 8006026:	e002      	b.n	800602e <_printf_i+0x1d2>
 8006028:	0671      	lsls	r1, r6, #25
 800602a:	d5fb      	bpl.n	8006024 <_printf_i+0x1c8>
 800602c:	8018      	strh	r0, [r3, #0]
 800602e:	2300      	movs	r3, #0
 8006030:	6123      	str	r3, [r4, #16]
 8006032:	4616      	mov	r6, r2
 8006034:	e7ba      	b.n	8005fac <_printf_i+0x150>
 8006036:	680b      	ldr	r3, [r1, #0]
 8006038:	1d1a      	adds	r2, r3, #4
 800603a:	600a      	str	r2, [r1, #0]
 800603c:	681e      	ldr	r6, [r3, #0]
 800603e:	6862      	ldr	r2, [r4, #4]
 8006040:	2100      	movs	r1, #0
 8006042:	4630      	mov	r0, r6
 8006044:	f7fa f8ec 	bl	8000220 <memchr>
 8006048:	b108      	cbz	r0, 800604e <_printf_i+0x1f2>
 800604a:	1b80      	subs	r0, r0, r6
 800604c:	6060      	str	r0, [r4, #4]
 800604e:	6863      	ldr	r3, [r4, #4]
 8006050:	6123      	str	r3, [r4, #16]
 8006052:	2300      	movs	r3, #0
 8006054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006058:	e7a8      	b.n	8005fac <_printf_i+0x150>
 800605a:	6923      	ldr	r3, [r4, #16]
 800605c:	4632      	mov	r2, r6
 800605e:	4649      	mov	r1, r9
 8006060:	4640      	mov	r0, r8
 8006062:	47d0      	blx	sl
 8006064:	3001      	adds	r0, #1
 8006066:	d0ab      	beq.n	8005fc0 <_printf_i+0x164>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	079b      	lsls	r3, r3, #30
 800606c:	d413      	bmi.n	8006096 <_printf_i+0x23a>
 800606e:	68e0      	ldr	r0, [r4, #12]
 8006070:	9b03      	ldr	r3, [sp, #12]
 8006072:	4298      	cmp	r0, r3
 8006074:	bfb8      	it	lt
 8006076:	4618      	movlt	r0, r3
 8006078:	e7a4      	b.n	8005fc4 <_printf_i+0x168>
 800607a:	2301      	movs	r3, #1
 800607c:	4632      	mov	r2, r6
 800607e:	4649      	mov	r1, r9
 8006080:	4640      	mov	r0, r8
 8006082:	47d0      	blx	sl
 8006084:	3001      	adds	r0, #1
 8006086:	d09b      	beq.n	8005fc0 <_printf_i+0x164>
 8006088:	3501      	adds	r5, #1
 800608a:	68e3      	ldr	r3, [r4, #12]
 800608c:	9903      	ldr	r1, [sp, #12]
 800608e:	1a5b      	subs	r3, r3, r1
 8006090:	42ab      	cmp	r3, r5
 8006092:	dcf2      	bgt.n	800607a <_printf_i+0x21e>
 8006094:	e7eb      	b.n	800606e <_printf_i+0x212>
 8006096:	2500      	movs	r5, #0
 8006098:	f104 0619 	add.w	r6, r4, #25
 800609c:	e7f5      	b.n	800608a <_printf_i+0x22e>
 800609e:	bf00      	nop
 80060a0:	08006532 	.word	0x08006532
 80060a4:	08006543 	.word	0x08006543

080060a8 <memcpy>:
 80060a8:	440a      	add	r2, r1
 80060aa:	4291      	cmp	r1, r2
 80060ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80060b0:	d100      	bne.n	80060b4 <memcpy+0xc>
 80060b2:	4770      	bx	lr
 80060b4:	b510      	push	{r4, lr}
 80060b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060be:	4291      	cmp	r1, r2
 80060c0:	d1f9      	bne.n	80060b6 <memcpy+0xe>
 80060c2:	bd10      	pop	{r4, pc}

080060c4 <memmove>:
 80060c4:	4288      	cmp	r0, r1
 80060c6:	b510      	push	{r4, lr}
 80060c8:	eb01 0402 	add.w	r4, r1, r2
 80060cc:	d902      	bls.n	80060d4 <memmove+0x10>
 80060ce:	4284      	cmp	r4, r0
 80060d0:	4623      	mov	r3, r4
 80060d2:	d807      	bhi.n	80060e4 <memmove+0x20>
 80060d4:	1e43      	subs	r3, r0, #1
 80060d6:	42a1      	cmp	r1, r4
 80060d8:	d008      	beq.n	80060ec <memmove+0x28>
 80060da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060e2:	e7f8      	b.n	80060d6 <memmove+0x12>
 80060e4:	4402      	add	r2, r0
 80060e6:	4601      	mov	r1, r0
 80060e8:	428a      	cmp	r2, r1
 80060ea:	d100      	bne.n	80060ee <memmove+0x2a>
 80060ec:	bd10      	pop	{r4, pc}
 80060ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060f6:	e7f7      	b.n	80060e8 <memmove+0x24>

080060f8 <_free_r>:
 80060f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060fa:	2900      	cmp	r1, #0
 80060fc:	d048      	beq.n	8006190 <_free_r+0x98>
 80060fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006102:	9001      	str	r0, [sp, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f1a1 0404 	sub.w	r4, r1, #4
 800610a:	bfb8      	it	lt
 800610c:	18e4      	addlt	r4, r4, r3
 800610e:	f000 f8d3 	bl	80062b8 <__malloc_lock>
 8006112:	4a20      	ldr	r2, [pc, #128]	; (8006194 <_free_r+0x9c>)
 8006114:	9801      	ldr	r0, [sp, #4]
 8006116:	6813      	ldr	r3, [r2, #0]
 8006118:	4615      	mov	r5, r2
 800611a:	b933      	cbnz	r3, 800612a <_free_r+0x32>
 800611c:	6063      	str	r3, [r4, #4]
 800611e:	6014      	str	r4, [r2, #0]
 8006120:	b003      	add	sp, #12
 8006122:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006126:	f000 b8cd 	b.w	80062c4 <__malloc_unlock>
 800612a:	42a3      	cmp	r3, r4
 800612c:	d90b      	bls.n	8006146 <_free_r+0x4e>
 800612e:	6821      	ldr	r1, [r4, #0]
 8006130:	1862      	adds	r2, r4, r1
 8006132:	4293      	cmp	r3, r2
 8006134:	bf04      	itt	eq
 8006136:	681a      	ldreq	r2, [r3, #0]
 8006138:	685b      	ldreq	r3, [r3, #4]
 800613a:	6063      	str	r3, [r4, #4]
 800613c:	bf04      	itt	eq
 800613e:	1852      	addeq	r2, r2, r1
 8006140:	6022      	streq	r2, [r4, #0]
 8006142:	602c      	str	r4, [r5, #0]
 8006144:	e7ec      	b.n	8006120 <_free_r+0x28>
 8006146:	461a      	mov	r2, r3
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	b10b      	cbz	r3, 8006150 <_free_r+0x58>
 800614c:	42a3      	cmp	r3, r4
 800614e:	d9fa      	bls.n	8006146 <_free_r+0x4e>
 8006150:	6811      	ldr	r1, [r2, #0]
 8006152:	1855      	adds	r5, r2, r1
 8006154:	42a5      	cmp	r5, r4
 8006156:	d10b      	bne.n	8006170 <_free_r+0x78>
 8006158:	6824      	ldr	r4, [r4, #0]
 800615a:	4421      	add	r1, r4
 800615c:	1854      	adds	r4, r2, r1
 800615e:	42a3      	cmp	r3, r4
 8006160:	6011      	str	r1, [r2, #0]
 8006162:	d1dd      	bne.n	8006120 <_free_r+0x28>
 8006164:	681c      	ldr	r4, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	6053      	str	r3, [r2, #4]
 800616a:	4421      	add	r1, r4
 800616c:	6011      	str	r1, [r2, #0]
 800616e:	e7d7      	b.n	8006120 <_free_r+0x28>
 8006170:	d902      	bls.n	8006178 <_free_r+0x80>
 8006172:	230c      	movs	r3, #12
 8006174:	6003      	str	r3, [r0, #0]
 8006176:	e7d3      	b.n	8006120 <_free_r+0x28>
 8006178:	6825      	ldr	r5, [r4, #0]
 800617a:	1961      	adds	r1, r4, r5
 800617c:	428b      	cmp	r3, r1
 800617e:	bf04      	itt	eq
 8006180:	6819      	ldreq	r1, [r3, #0]
 8006182:	685b      	ldreq	r3, [r3, #4]
 8006184:	6063      	str	r3, [r4, #4]
 8006186:	bf04      	itt	eq
 8006188:	1949      	addeq	r1, r1, r5
 800618a:	6021      	streq	r1, [r4, #0]
 800618c:	6054      	str	r4, [r2, #4]
 800618e:	e7c7      	b.n	8006120 <_free_r+0x28>
 8006190:	b003      	add	sp, #12
 8006192:	bd30      	pop	{r4, r5, pc}
 8006194:	20000100 	.word	0x20000100

08006198 <_malloc_r>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	1ccd      	adds	r5, r1, #3
 800619c:	f025 0503 	bic.w	r5, r5, #3
 80061a0:	3508      	adds	r5, #8
 80061a2:	2d0c      	cmp	r5, #12
 80061a4:	bf38      	it	cc
 80061a6:	250c      	movcc	r5, #12
 80061a8:	2d00      	cmp	r5, #0
 80061aa:	4606      	mov	r6, r0
 80061ac:	db01      	blt.n	80061b2 <_malloc_r+0x1a>
 80061ae:	42a9      	cmp	r1, r5
 80061b0:	d903      	bls.n	80061ba <_malloc_r+0x22>
 80061b2:	230c      	movs	r3, #12
 80061b4:	6033      	str	r3, [r6, #0]
 80061b6:	2000      	movs	r0, #0
 80061b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ba:	f000 f87d 	bl	80062b8 <__malloc_lock>
 80061be:	4921      	ldr	r1, [pc, #132]	; (8006244 <_malloc_r+0xac>)
 80061c0:	680a      	ldr	r2, [r1, #0]
 80061c2:	4614      	mov	r4, r2
 80061c4:	b99c      	cbnz	r4, 80061ee <_malloc_r+0x56>
 80061c6:	4f20      	ldr	r7, [pc, #128]	; (8006248 <_malloc_r+0xb0>)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	b923      	cbnz	r3, 80061d6 <_malloc_r+0x3e>
 80061cc:	4621      	mov	r1, r4
 80061ce:	4630      	mov	r0, r6
 80061d0:	f000 f862 	bl	8006298 <_sbrk_r>
 80061d4:	6038      	str	r0, [r7, #0]
 80061d6:	4629      	mov	r1, r5
 80061d8:	4630      	mov	r0, r6
 80061da:	f000 f85d 	bl	8006298 <_sbrk_r>
 80061de:	1c43      	adds	r3, r0, #1
 80061e0:	d123      	bne.n	800622a <_malloc_r+0x92>
 80061e2:	230c      	movs	r3, #12
 80061e4:	6033      	str	r3, [r6, #0]
 80061e6:	4630      	mov	r0, r6
 80061e8:	f000 f86c 	bl	80062c4 <__malloc_unlock>
 80061ec:	e7e3      	b.n	80061b6 <_malloc_r+0x1e>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	1b5b      	subs	r3, r3, r5
 80061f2:	d417      	bmi.n	8006224 <_malloc_r+0x8c>
 80061f4:	2b0b      	cmp	r3, #11
 80061f6:	d903      	bls.n	8006200 <_malloc_r+0x68>
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	441c      	add	r4, r3
 80061fc:	6025      	str	r5, [r4, #0]
 80061fe:	e004      	b.n	800620a <_malloc_r+0x72>
 8006200:	6863      	ldr	r3, [r4, #4]
 8006202:	42a2      	cmp	r2, r4
 8006204:	bf0c      	ite	eq
 8006206:	600b      	streq	r3, [r1, #0]
 8006208:	6053      	strne	r3, [r2, #4]
 800620a:	4630      	mov	r0, r6
 800620c:	f000 f85a 	bl	80062c4 <__malloc_unlock>
 8006210:	f104 000b 	add.w	r0, r4, #11
 8006214:	1d23      	adds	r3, r4, #4
 8006216:	f020 0007 	bic.w	r0, r0, #7
 800621a:	1ac2      	subs	r2, r0, r3
 800621c:	d0cc      	beq.n	80061b8 <_malloc_r+0x20>
 800621e:	1a1b      	subs	r3, r3, r0
 8006220:	50a3      	str	r3, [r4, r2]
 8006222:	e7c9      	b.n	80061b8 <_malloc_r+0x20>
 8006224:	4622      	mov	r2, r4
 8006226:	6864      	ldr	r4, [r4, #4]
 8006228:	e7cc      	b.n	80061c4 <_malloc_r+0x2c>
 800622a:	1cc4      	adds	r4, r0, #3
 800622c:	f024 0403 	bic.w	r4, r4, #3
 8006230:	42a0      	cmp	r0, r4
 8006232:	d0e3      	beq.n	80061fc <_malloc_r+0x64>
 8006234:	1a21      	subs	r1, r4, r0
 8006236:	4630      	mov	r0, r6
 8006238:	f000 f82e 	bl	8006298 <_sbrk_r>
 800623c:	3001      	adds	r0, #1
 800623e:	d1dd      	bne.n	80061fc <_malloc_r+0x64>
 8006240:	e7cf      	b.n	80061e2 <_malloc_r+0x4a>
 8006242:	bf00      	nop
 8006244:	20000100 	.word	0x20000100
 8006248:	20000104 	.word	0x20000104

0800624c <_realloc_r>:
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	4607      	mov	r7, r0
 8006250:	4614      	mov	r4, r2
 8006252:	460e      	mov	r6, r1
 8006254:	b921      	cbnz	r1, 8006260 <_realloc_r+0x14>
 8006256:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800625a:	4611      	mov	r1, r2
 800625c:	f7ff bf9c 	b.w	8006198 <_malloc_r>
 8006260:	b922      	cbnz	r2, 800626c <_realloc_r+0x20>
 8006262:	f7ff ff49 	bl	80060f8 <_free_r>
 8006266:	4625      	mov	r5, r4
 8006268:	4628      	mov	r0, r5
 800626a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800626c:	f000 f830 	bl	80062d0 <_malloc_usable_size_r>
 8006270:	42a0      	cmp	r0, r4
 8006272:	d20f      	bcs.n	8006294 <_realloc_r+0x48>
 8006274:	4621      	mov	r1, r4
 8006276:	4638      	mov	r0, r7
 8006278:	f7ff ff8e 	bl	8006198 <_malloc_r>
 800627c:	4605      	mov	r5, r0
 800627e:	2800      	cmp	r0, #0
 8006280:	d0f2      	beq.n	8006268 <_realloc_r+0x1c>
 8006282:	4631      	mov	r1, r6
 8006284:	4622      	mov	r2, r4
 8006286:	f7ff ff0f 	bl	80060a8 <memcpy>
 800628a:	4631      	mov	r1, r6
 800628c:	4638      	mov	r0, r7
 800628e:	f7ff ff33 	bl	80060f8 <_free_r>
 8006292:	e7e9      	b.n	8006268 <_realloc_r+0x1c>
 8006294:	4635      	mov	r5, r6
 8006296:	e7e7      	b.n	8006268 <_realloc_r+0x1c>

08006298 <_sbrk_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4d06      	ldr	r5, [pc, #24]	; (80062b4 <_sbrk_r+0x1c>)
 800629c:	2300      	movs	r3, #0
 800629e:	4604      	mov	r4, r0
 80062a0:	4608      	mov	r0, r1
 80062a2:	602b      	str	r3, [r5, #0]
 80062a4:	f7fb f9fa 	bl	800169c <_sbrk>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d102      	bne.n	80062b2 <_sbrk_r+0x1a>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	b103      	cbz	r3, 80062b2 <_sbrk_r+0x1a>
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	bd38      	pop	{r3, r4, r5, pc}
 80062b4:	200002c0 	.word	0x200002c0

080062b8 <__malloc_lock>:
 80062b8:	4801      	ldr	r0, [pc, #4]	; (80062c0 <__malloc_lock+0x8>)
 80062ba:	f000 b811 	b.w	80062e0 <__retarget_lock_acquire_recursive>
 80062be:	bf00      	nop
 80062c0:	200002c8 	.word	0x200002c8

080062c4 <__malloc_unlock>:
 80062c4:	4801      	ldr	r0, [pc, #4]	; (80062cc <__malloc_unlock+0x8>)
 80062c6:	f000 b80c 	b.w	80062e2 <__retarget_lock_release_recursive>
 80062ca:	bf00      	nop
 80062cc:	200002c8 	.word	0x200002c8

080062d0 <_malloc_usable_size_r>:
 80062d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d4:	1f18      	subs	r0, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	bfbc      	itt	lt
 80062da:	580b      	ldrlt	r3, [r1, r0]
 80062dc:	18c0      	addlt	r0, r0, r3
 80062de:	4770      	bx	lr

080062e0 <__retarget_lock_acquire_recursive>:
 80062e0:	4770      	bx	lr

080062e2 <__retarget_lock_release_recursive>:
 80062e2:	4770      	bx	lr

080062e4 <_init>:
 80062e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e6:	bf00      	nop
 80062e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ea:	bc08      	pop	{r3}
 80062ec:	469e      	mov	lr, r3
 80062ee:	4770      	bx	lr

080062f0 <_fini>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	bf00      	nop
 80062f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f6:	bc08      	pop	{r3}
 80062f8:	469e      	mov	lr, r3
 80062fa:	4770      	bx	lr
